{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Wrapper QTS Utilizando WrapperController y WrapperLibrary se puede hacer uso del servicio de QTS (Quality Tracking System) de forma eficaz y sencilla. A esto hay que sumarle un extra, esta librer\u00eda est\u00e1 desarrollada para LabVIEW ; gracias a esto es muy sencillo integrar su funcionalidad con la gran mayor\u00eda de aplicaciones de trazabilidad usadas en Ford Motor Company .","title":"Home"},{"location":"index.html#wrapper-qts","text":"Utilizando WrapperController y WrapperLibrary se puede hacer uso del servicio de QTS (Quality Tracking System) de forma eficaz y sencilla. A esto hay que sumarle un extra, esta librer\u00eda est\u00e1 desarrollada para LabVIEW ; gracias a esto es muy sencillo integrar su funcionalidad con la gran mayor\u00eda de aplicaciones de trazabilidad usadas en Ford Motor Company .","title":"Wrapper QTS"},{"location":"About/overview.html","text":"Overview 1 Working on it","title":"Overview"},{"location":"About/overview.html#overview","text":"1 Working on it","title":"Overview"},{"location":"About/qts.html","text":"Quality Tracking System (QTS) 1 Working on it","title":"QTS"},{"location":"About/qts.html#quality-tracking-system-qts","text":"1 Working on it","title":"Quality Tracking System (QTS)"},{"location":"About/soap.html","text":"Simple Object Access Protocol (SOAP) 1 Working on it SOAP es un protocolo estandar que define como dos objetos en diferentes procesos pueden comunicarse mediante el uso de mensajeria XML . Tres caracteristicas prinicpales: Extensibilidad: permite una gran variedad de extensiones que aumentan su funcionalidad. Neutralidad: es utilizado directamente sobre protocolo de transporte TCP puediendo as\u00ed usar cualquier protocolo de aplicacion como HTTP , SMTP , etc. Independencia: al utilizar un protocolo de transporte tan simple y estar basado en XML es posible usar SOAP bajo cualquier lenguaje de programaci\u00f3n. El mensaje se estructura mediante las siguientes partes: Envelope: parte que identifica el mensaje. Header: es un mecanismo de extension para asi indicar como debe ser procesado el mensaje. Body: es la informacion relativa a la peticion y su respuesta. Fault: contiene informacion relativa a errores en el procesado.","title":"SOAP"},{"location":"About/soap.html#simple-object-access-protocol-soap","text":"1 Working on it SOAP es un protocolo estandar que define como dos objetos en diferentes procesos pueden comunicarse mediante el uso de mensajeria XML . Tres caracteristicas prinicpales: Extensibilidad: permite una gran variedad de extensiones que aumentan su funcionalidad. Neutralidad: es utilizado directamente sobre protocolo de transporte TCP puediendo as\u00ed usar cualquier protocolo de aplicacion como HTTP , SMTP , etc. Independencia: al utilizar un protocolo de transporte tan simple y estar basado en XML es posible usar SOAP bajo cualquier lenguaje de programaci\u00f3n. El mensaje se estructura mediante las siguientes partes: Envelope: parte que identifica el mensaje. Header: es un mecanismo de extension para asi indicar como debe ser procesado el mensaje. Body: es la informacion relativa a la peticion y su respuesta. Fault: contiene informacion relativa a errores en el procesado.","title":"Simple Object Access Protocol (SOAP)"},{"location":"Docs/install.html","text":"WrapperController Installation 1 working on it Si se desea hacer uso de la libreria en una nueva aplicaci\u00f3n unicamente habr\u00e1 que descargar dicha librer\u00eda e inluirla en el proyecto donde se quiera hacer uso de ella. Descargue el archivo .zip: WrapperController (Latest Version) Extraiga todo el contenido en el directorio del proyecto donde vaya a hacer uso de la misma. Haga uso de sus funciones . Software Requeriments A continuaci\u00f3n se detallar\u00e1 los requisitos de software necesarios para hacer funcionar la libreria WrapperController. LabVIEW Runtime 2017 Como principal requisito es tener instalado LabVIEW Runtime y as\u00ed poder ejecutarse la librer\u00eda de forma correcta. LabVIEW Runtime 2017 (v.f3 32bits) Warning - Versions No ha sido testada con versiones superiores de LabVIEW. Tanto una versi\u00f3n superior de compilaci\u00f3n a la f3 como a una actualizaci\u00f3n de versi\u00f3n anual o con el uso de la versi\u00f3n para 64 bits. Info La versi\u00f3n 64 bits deber\u00eda funcionar correctamente, unicamente no se hace uso de ella porque no es necesario ocupar el doble de memoria de la CPU que no estar\u00eda siendo aprovechada por la propia librer\u00eda. .NET Framework 4.7.2 Debido al uso interno de una librer\u00eda ( WrapperLibrary ) desarrollada en C# es necesario tener instalado .NET para poder hacer uso de sus funciones, las cuales son necesarias. What is .NET? .NET es una plataforma de desarrollo gratuita, multiplataforma y de codigo abierto para construir una gran variedad de diferentes tipos de aplicaciones. Con .NET puedes usar multiples lenguajes, editores y librerias para desarrollar software para web, moviles, PC, plataformas de juegos o IoT. What is .NET Framework? Sea cual sea el lenguaje que estes utilizando (C#, F# o Visual Basic) tu codigo se ejecutar\u00e1 de forma nativa en cualquiera de los sistemas operativos compatibles. .NET Framework soporta sitios web, servicios, aplicaciones de escritorio y m\u00e1s en Windows. Pinche aqu\u00ed para saber m\u00e1s. Solo ser\u00eda necesario instalar la version Runtime. .NET Framework 4.7.2 Warning - Versions No ha sido testada con versiones anteriores ni superiores. Repair Required Suele ser necesario reparar, despu\u00e9s de instalar la versi\u00f3n 4.7.2, alguna versi\u00f3n anterior para que funcione todo correctamente. Tip El propio instalador puede ser utilizado para reparar versiones anteriores.","title":"Installation"},{"location":"Docs/install.html#wrappercontroller-installation","text":"1 working on it Si se desea hacer uso de la libreria en una nueva aplicaci\u00f3n unicamente habr\u00e1 que descargar dicha librer\u00eda e inluirla en el proyecto donde se quiera hacer uso de ella. Descargue el archivo .zip: WrapperController (Latest Version) Extraiga todo el contenido en el directorio del proyecto donde vaya a hacer uso de la misma. Haga uso de sus funciones .","title":"WrapperController Installation"},{"location":"Docs/install.html#software-requeriments","text":"A continuaci\u00f3n se detallar\u00e1 los requisitos de software necesarios para hacer funcionar la libreria WrapperController.","title":"Software Requeriments"},{"location":"Docs/install.html#labview-runtime-2017","text":"Como principal requisito es tener instalado LabVIEW Runtime y as\u00ed poder ejecutarse la librer\u00eda de forma correcta. LabVIEW Runtime 2017 (v.f3 32bits) Warning - Versions No ha sido testada con versiones superiores de LabVIEW. Tanto una versi\u00f3n superior de compilaci\u00f3n a la f3 como a una actualizaci\u00f3n de versi\u00f3n anual o con el uso de la versi\u00f3n para 64 bits. Info La versi\u00f3n 64 bits deber\u00eda funcionar correctamente, unicamente no se hace uso de ella porque no es necesario ocupar el doble de memoria de la CPU que no estar\u00eda siendo aprovechada por la propia librer\u00eda.","title":"LabVIEW Runtime 2017"},{"location":"Docs/install.html#net-framework-472","text":"Debido al uso interno de una librer\u00eda ( WrapperLibrary ) desarrollada en C# es necesario tener instalado .NET para poder hacer uso de sus funciones, las cuales son necesarias. What is .NET? .NET es una plataforma de desarrollo gratuita, multiplataforma y de codigo abierto para construir una gran variedad de diferentes tipos de aplicaciones. Con .NET puedes usar multiples lenguajes, editores y librerias para desarrollar software para web, moviles, PC, plataformas de juegos o IoT. What is .NET Framework? Sea cual sea el lenguaje que estes utilizando (C#, F# o Visual Basic) tu codigo se ejecutar\u00e1 de forma nativa en cualquiera de los sistemas operativos compatibles. .NET Framework soporta sitios web, servicios, aplicaciones de escritorio y m\u00e1s en Windows. Pinche aqu\u00ed para saber m\u00e1s. Solo ser\u00eda necesario instalar la version Runtime. .NET Framework 4.7.2 Warning - Versions No ha sido testada con versiones anteriores ni superiores. Repair Required Suele ser necesario reparar, despu\u00e9s de instalar la versi\u00f3n 4.7.2, alguna versi\u00f3n anterior para que funcione todo correctamente. Tip El propio instalador puede ser utilizado para reparar versiones anteriores.","title":".NET Framework 4.7.2"},{"location":"Docs/intro.html","text":"Introduction WrapperController En este apartado podr\u00e1s encontrar todo lo relativo al uso de Wrapper Controller , sus funciones y clusters que utiliza de forma interna. Esta librer\u00eda, desarrollada en LabVIEW , hace uso de diversos servicios/librer\u00edas gracias a las cuales somos capaces de ofrecer toda la funcionalidad necesaria para que este nuevo sistema sea capaz de sustituir al viejo sistema de RFTag. Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre WrapperController. WrapperLibrary WrapperLibrary es una librer\u00eda desarrollada en C# que permite entre otras cosas hacer uso del servicio de QTS , es aqu\u00ed donde se encapsulan todas las funciones y se simplifica su uso y definici\u00f3n para as\u00ed ser usable de forma m\u00e1s sencilla sin necesidad de una alta complejidad. Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre WrapperLibrary. Quality Tracking System (QTS) QTS , es un servicio en la nube disponible desde un servidor interno de VEP (Valencia Engine Plant). Gracias al cual podemos hacer reportes y consultas sobre la base de datos de QLSCM. Es este servicio el encargado de hacer las peticiones sobre la base de datos para subir o consultar todos los datos relativos a la trazabilidad del proceso de mecanizado de piezas. Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre QTS. Simple Object Access Protocol (SOAP) SOAP es un protocolo estandar que define como dos objetos en diferentes procesos pueden comunicarse mediante el uso de mensajeria XML . Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre SOAP.","title":"Introduction"},{"location":"Docs/intro.html#introduction","text":"","title":"Introduction"},{"location":"Docs/intro.html#wrappercontroller","text":"En este apartado podr\u00e1s encontrar todo lo relativo al uso de Wrapper Controller , sus funciones y clusters que utiliza de forma interna. Esta librer\u00eda, desarrollada en LabVIEW , hace uso de diversos servicios/librer\u00edas gracias a las cuales somos capaces de ofrecer toda la funcionalidad necesaria para que este nuevo sistema sea capaz de sustituir al viejo sistema de RFTag. Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre WrapperController.","title":"WrapperController"},{"location":"Docs/intro.html#wrapperlibrary","text":"WrapperLibrary es una librer\u00eda desarrollada en C# que permite entre otras cosas hacer uso del servicio de QTS , es aqu\u00ed donde se encapsulan todas las funciones y se simplifica su uso y definici\u00f3n para as\u00ed ser usable de forma m\u00e1s sencilla sin necesidad de una alta complejidad. Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre WrapperLibrary.","title":"WrapperLibrary"},{"location":"Docs/intro.html#quality-tracking-system-qts","text":"QTS , es un servicio en la nube disponible desde un servidor interno de VEP (Valencia Engine Plant). Gracias al cual podemos hacer reportes y consultas sobre la base de datos de QLSCM. Es este servicio el encargado de hacer las peticiones sobre la base de datos para subir o consultar todos los datos relativos a la trazabilidad del proceso de mecanizado de piezas. Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre QTS.","title":"Quality Tracking System (QTS)"},{"location":"Docs/intro.html#simple-object-access-protocol-soap","text":"SOAP es un protocolo estandar que define como dos objetos en diferentes procesos pueden comunicarse mediante el uso de mensajeria XML . Help Pinche aqu\u00ed para obtener m\u00e1s informaci\u00f3n sobre SOAP.","title":"Simple Object Access Protocol (SOAP)"},{"location":"Docs/GettingStarted/overview.html","text":"Select Library Aqu\u00ed puedes encontrar todo lo relacionado con la librer\u00eda preparada para ser usada mediante la cual hacemos uso de QTS . WrapperController (LabVIEW) Aqu\u00ed se encuentran detalladas todas las posibles funciones que permite el servicio SOAP de QTS . Esta libreria es usada por la anteriormente mencionada. WrapperLibrary (.NET C#)","title":"Overview"},{"location":"Docs/GettingStarted/overview.html#select-library","text":"Aqu\u00ed puedes encontrar todo lo relacionado con la librer\u00eda preparada para ser usada mediante la cual hacemos uso de QTS . WrapperController (LabVIEW) Aqu\u00ed se encuentran detalladas todas las posibles funciones que permite el servicio SOAP de QTS . Esta libreria es usada por la anteriormente mencionada. WrapperLibrary (.NET C#)","title":"Select Library"},{"location":"Docs/GettingStarted/LabVIEW/overview.html","text":"Overview Description Esta librer\u00eda esta pensada para ser facilmente utilizada en LabVIEW y hacer uso internamente de WrapperLibrary, liber\u00eda desarrollada en .NET para la simplificaci\u00f3n de QTS y toda su funcionalidad. Table of Contents Basic Functions Aqu\u00ed podr\u00e1 encontrar todo lo relacionado para poder crear y conectarse al servidor de QTS. Principal Functions Aqu\u00ed se encuentran detalladas todas las posibles funciones dentro de la librer\u00eda. Built-in Clusters Aqu\u00ed se definen los clusteres utilizados para poder hacer todas y cada una de las distintas llamadas.","title":"Overview"},{"location":"Docs/GettingStarted/LabVIEW/overview.html#overview","text":"Description Esta librer\u00eda esta pensada para ser facilmente utilizada en LabVIEW y hacer uso internamente de WrapperLibrary, liber\u00eda desarrollada en .NET para la simplificaci\u00f3n de QTS y toda su funcionalidad.","title":"Overview"},{"location":"Docs/GettingStarted/LabVIEW/overview.html#table-of-contents","text":"Basic Functions Aqu\u00ed podr\u00e1 encontrar todo lo relacionado para poder crear y conectarse al servidor de QTS. Principal Functions Aqu\u00ed se encuentran detalladas todas las posibles funciones dentro de la librer\u00eda. Built-in Clusters Aqu\u00ed se definen los clusteres utilizados para poder hacer todas y cada una de las distintas llamadas.","title":"Table of Contents"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html","text":"Arguments Aqu\u00ed se encuentran definidos todos aquellos clusteres utilizados en llamadas a funciones. BirthHistory Estructura de datos utilizada para hacer las llamadas a las funciones de BirthHistory . dataDTS ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza entre o sale por la estaci\u00f3n indicada. palletID ( string ): dato que identifica al pallet. partTypeCode ( enum ): dato que indica que tipo de ensamblado es. partTypeCodeSpecified ( boolean ): Valor de verdad que indica si se ha indicado el partTypeCode ( true ) o no ( false ). PartData ( string ): DESCONOCIDO . UniClassification ( enum ): enumerador que indica que clase de pieza es. Result ( enum ): enumerador que indica el resultado de la operaci\u00f3n al paso de la pieza por dicha estaci\u00f3n. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. GetOperationInfo Estructura de datos utilizada para hacer las peticiones relacionadas con el conjuntos de funciones GetOperationInfo . UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. Op Info ( array ): dato que identifica la operaci\u00f3n y estaci\u00f3n que se desean consultar. GetProcessDataHistory Estructura de datos utilizada para las llamadas al grupo de funciones de GetProcessDataHistory . Warning Sigue en desarrollo. stationID ( array ): array que contiene los string de las estaciones que se quieren obtener el DataHistory. maxRows ( int ): indica la cantidad m\u00e1xima de datos que se quiere obtener. fromDate ( Time Stamp ): indica desde que momento se quieren obtener datos. toDate ( Time Stamp ): indica hasta que momento se desea obtener datos. TestDatabaseConnection Estructura de datos utilizada para hacer la petici\u00f3n TestDatabaseConnection . Warning Sigue en desarrollo. connection ( string ): DESCONOCIDO . provider ( int ): DESCONOCIDO . Quarantine Estructura de datos utilizada para las llamadas tanto de subida como de consulta para las cuarentenas . descripcion ( string ): breve explicaci\u00f3n de porque est\u00e1 dicha pieza en ese estado negativo. operacion ( string ): dato que identifica la operaci\u00f3n que reporto dicho estado. fecha ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza fue declarada en dicho estado. quarantineStatus ( enum ): enumerador que indica el estado de esa pieza. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza.","title":"Arguments"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html#arguments","text":"Aqu\u00ed se encuentran definidos todos aquellos clusteres utilizados en llamadas a funciones.","title":"Arguments"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html#birthhistory","text":"Estructura de datos utilizada para hacer las llamadas a las funciones de BirthHistory . dataDTS ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza entre o sale por la estaci\u00f3n indicada. palletID ( string ): dato que identifica al pallet. partTypeCode ( enum ): dato que indica que tipo de ensamblado es. partTypeCodeSpecified ( boolean ): Valor de verdad que indica si se ha indicado el partTypeCode ( true ) o no ( false ). PartData ( string ): DESCONOCIDO . UniClassification ( enum ): enumerador que indica que clase de pieza es. Result ( enum ): enumerador que indica el resultado de la operaci\u00f3n al paso de la pieza por dicha estaci\u00f3n. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza.","title":"BirthHistory"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html#getoperationinfo","text":"Estructura de datos utilizada para hacer las peticiones relacionadas con el conjuntos de funciones GetOperationInfo . UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. Op Info ( array ): dato que identifica la operaci\u00f3n y estaci\u00f3n que se desean consultar.","title":"GetOperationInfo"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html#getprocessdatahistory","text":"Estructura de datos utilizada para las llamadas al grupo de funciones de GetProcessDataHistory . Warning Sigue en desarrollo. stationID ( array ): array que contiene los string de las estaciones que se quieren obtener el DataHistory. maxRows ( int ): indica la cantidad m\u00e1xima de datos que se quiere obtener. fromDate ( Time Stamp ): indica desde que momento se quieren obtener datos. toDate ( Time Stamp ): indica hasta que momento se desea obtener datos.","title":"GetProcessDataHistory"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html#testdatabaseconnection","text":"Estructura de datos utilizada para hacer la petici\u00f3n TestDatabaseConnection . Warning Sigue en desarrollo. connection ( string ): DESCONOCIDO . provider ( int ): DESCONOCIDO .","title":"TestDatabaseConnection"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/args.html#quarantine","text":"Estructura de datos utilizada para las llamadas tanto de subida como de consulta para las cuarentenas . descripcion ( string ): breve explicaci\u00f3n de porque est\u00e1 dicha pieza en ese estado negativo. operacion ( string ): dato que identifica la operaci\u00f3n que reporto dicho estado. fecha ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza fue declarada en dicho estado. quarantineStatus ( enum ): enumerador que indica el estado de esa pieza. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza.","title":"Quarantine"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html","text":"Basic Clusters Enums Basic Clusters Aqu\u00ed est\u00e1n documentados los clusteres basicos utilizados en la librer\u00eda. configStructure Estructura de datos utilizada para configurar y crear las instancias de objetos necesarias para hacer uso del servicio de QTS. dataSourceID ( int ): dato que identifica a la fuente de datos. nodeID ( int ): dato que identifica al nodo. layoutID ( int ): dato que identifica el mapa de atributos a utilizar. layoutVersion ( int ): dato que identifica la versi\u00f3n del mapa a ser usado. OPINFO ( cluster ): estructura de datos con la informaci\u00f3n de la m\u00e1quina. AppendDM ( string ): Cadena de caracteres a la cual se concatena el UnitID pasado en las funciones. serverQtsIP ( string ): direcci\u00f3n IP del servidor de QTS contra el cual enviaremos las peticiones necesarias. isCoProcessor ( boolean ): valor de verdad que indica si se debe actuar como CoProcessor ( true ) o como HandHeld ( false ). basicInformation Estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. wrapperReference ( .NET object ): objeto perteneciente a WrapperLibrary. dataSourceID ( int ): dato que identifica a la fuente de datos. nodeID ( int ): dato que identifica al nodo. layoutID ( int ): dato que identifica el mapa de atributos a utilizar. layoutVersion ( int ): dato que identifica la versi\u00f3n del mapa a ser usado. OPINFO ( cluster ): estructura de datos con la informaci\u00f3n de la m\u00e1quina. transaction ( int ): n\u00famero utilizado para identificar los mensajes enviados. AppendDM ( string ): Cadena de caracteres a la cual se concatena el UnitID pasado en las funciones. Atributos Estructura de datos que incluye los datos relacionados con los atributos generados por las estaciones. id ( string ): identificador del atributo. Valor ( string ): valor que adquiere dicho atributo. OperationInfo Estrutura de datos que incluye los identificadores de una estacion/operacion. operationID ( string ): identificador de la operaci\u00f3n. stationID ( string ): identificador de la estaci\u00f3n. UnitInfo Estructura de datos que inlcuye los identificadores de una pieza. unitID ( string ): identificador de la pieza. unitType/WERS ( string ): identificador del modelo. Enums Definici\u00f3n de los enumeradores utilizados en la librer\u00eda. PartTypeCode Enumerador que indica que tipo de partici\u00f3n es la pieza indicada, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n No Aplicable 0 Indica que no es aplicable a ese UnitID Left 20 Right 21 Result Enumerador que indica cual ha sido el resultado de la operaci\u00f3n dada una pieza y una estaci\u00f3n, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n InProcess 0 La operaci\u00f3n est\u00e1 en proceso Complete (PASS) 1 Completado con exito Complete w/NC (FAIL) 2 Completado con fallo Abort 3 Operaci\u00f3n abortada Bypass 4 BuyOff 5 Offloaded 6 Scrap 7 Chatarra Offloaded or Strip Back 8 Reload 9 Reload Repair 10 Reload-Strip Back 11 Reload-Customer Return 12 Reload-Re Rework 13 Repaired 14 Check Point 15 Quarantine 16 UnitClassification Enumerador que indica que clase de pieza es, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n Regular 1 Pieza normal de producci\u00f3n Master 2 PV 3 Gage 4 Customer Return 5 Service Unit 6 Float 7 DESCONOCIDO 8 8 Unknown Left 20 Right 21 QuarantineStatus Enumerador que indica el estado de una pieza, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n OK 1 Pieza correcta, sin cuarentena Quarantine 2 Pieza en cuarentena Scrap 4 Pieza catalogada como chatarra Error 8 Se ha producido un error al consultar el estado de la pieza","title":"Basic Clusters & Enums"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#basic-clusters-enums","text":"","title":"Basic Clusters &amp; Enums"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#basic-clusters","text":"Aqu\u00ed est\u00e1n documentados los clusteres basicos utilizados en la librer\u00eda.","title":"Basic Clusters"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#configstructure","text":"Estructura de datos utilizada para configurar y crear las instancias de objetos necesarias para hacer uso del servicio de QTS. dataSourceID ( int ): dato que identifica a la fuente de datos. nodeID ( int ): dato que identifica al nodo. layoutID ( int ): dato que identifica el mapa de atributos a utilizar. layoutVersion ( int ): dato que identifica la versi\u00f3n del mapa a ser usado. OPINFO ( cluster ): estructura de datos con la informaci\u00f3n de la m\u00e1quina. AppendDM ( string ): Cadena de caracteres a la cual se concatena el UnitID pasado en las funciones. serverQtsIP ( string ): direcci\u00f3n IP del servidor de QTS contra el cual enviaremos las peticiones necesarias. isCoProcessor ( boolean ): valor de verdad que indica si se debe actuar como CoProcessor ( true ) o como HandHeld ( false ).","title":"configStructure"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#basicinformation","text":"Estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. wrapperReference ( .NET object ): objeto perteneciente a WrapperLibrary. dataSourceID ( int ): dato que identifica a la fuente de datos. nodeID ( int ): dato que identifica al nodo. layoutID ( int ): dato que identifica el mapa de atributos a utilizar. layoutVersion ( int ): dato que identifica la versi\u00f3n del mapa a ser usado. OPINFO ( cluster ): estructura de datos con la informaci\u00f3n de la m\u00e1quina. transaction ( int ): n\u00famero utilizado para identificar los mensajes enviados. AppendDM ( string ): Cadena de caracteres a la cual se concatena el UnitID pasado en las funciones.","title":"basicInformation"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#atributos","text":"Estructura de datos que incluye los datos relacionados con los atributos generados por las estaciones. id ( string ): identificador del atributo. Valor ( string ): valor que adquiere dicho atributo.","title":"Atributos"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#operationinfo","text":"Estrutura de datos que incluye los identificadores de una estacion/operacion. operationID ( string ): identificador de la operaci\u00f3n. stationID ( string ): identificador de la estaci\u00f3n.","title":"OperationInfo"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#unitinfo","text":"Estructura de datos que inlcuye los identificadores de una pieza. unitID ( string ): identificador de la pieza. unitType/WERS ( string ): identificador del modelo.","title":"UnitInfo"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#enums","text":"Definici\u00f3n de los enumeradores utilizados en la librer\u00eda.","title":"Enums"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#parttypecode","text":"Enumerador que indica que tipo de partici\u00f3n es la pieza indicada, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n No Aplicable 0 Indica que no es aplicable a ese UnitID Left 20 Right 21","title":"PartTypeCode"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#result","text":"Enumerador que indica cual ha sido el resultado de la operaci\u00f3n dada una pieza y una estaci\u00f3n, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n InProcess 0 La operaci\u00f3n est\u00e1 en proceso Complete (PASS) 1 Completado con exito Complete w/NC (FAIL) 2 Completado con fallo Abort 3 Operaci\u00f3n abortada Bypass 4 BuyOff 5 Offloaded 6 Scrap 7 Chatarra Offloaded or Strip Back 8 Reload 9 Reload Repair 10 Reload-Strip Back 11 Reload-Customer Return 12 Reload-Re Rework 13 Repaired 14 Check Point 15 Quarantine 16","title":"Result"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#unitclassification","text":"Enumerador que indica que clase de pieza es, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n Regular 1 Pieza normal de producci\u00f3n Master 2 PV 3 Gage 4 Customer Return 5 Service Unit 6 Float 7 DESCONOCIDO 8 8 Unknown Left 20 Right 21","title":"UnitClassification"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/basic.html#quarantinestatus","text":"Enumerador que indica el estado de una pieza, con los siguientes valores admitidos: Nombre Valor Descripci\u00f3n OK 1 Pieza correcta, sin cuarentena Quarantine 2 Pieza en cuarentena Scrap 4 Pieza catalogada como chatarra Error 8 Se ha producido un error al consultar el estado de la pieza","title":"QuarantineStatus"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html","text":"Responses Aqu\u00ed se encuentran detallados todos los posibles clusteres identificados como respuesta de alguna funci\u00f3n. Quarantine Estructura de datos devuelta con las funciones de cuarentenas . Cuenta de reutilizacion ( int ): dato que indica cuantas veces se ha reutilizado esa pieza. Descripcion ( string ): breve explicaci\u00f3n del motivo de ese estado negativo. quarantineStatus ( enum/int ): dato que indica el estado de la pieza. ID cuarentena ( string ): valor que identifica a est\u00e1 cuarentena si la hay. Nombre de la cuarentena ( string ): nombre que se le pone a esta cuaretena, puede servir para identificarla de forma m\u00e1s sencilla. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. mensaje ( string ): valor devuelto por el servidor de QTS que indica si la llamada ha sido correcta ( OK ). GetAllStations Estructura de datos utilizada para hacer la llamada a la funci\u00f3n de GetAllStations . ID ( string ): identificador de la estaci\u00f3n. Descripcion ( string ): breve descripci\u00f3n de la estaci\u00f3n. BirthHistory Estructura de datos devuelta como respuesta al hacer las llamadas a las funciones de BirthHistory . dataDTS ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza entre o sale por la estaci\u00f3n indicada. OP INFO ( cluster ): estructura de datos utilizada para identificar a una operaci\u00f3n/estaci\u00f3n. quarantineStatus ( enum/int ): dato que indica el estado de la pieza. partData ( string ): DESCONOCIDO . UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. mensaje ( string ): valor devuelto por el servidor de QTS que indica si la llamada ha sido correcta ( OK ). GetOperationInfo Estructura de datos obtenida como respuesta al hacer las llamadas a las funciones de OperationStatus . fixtureNumber ( string ): DESCONOCIDO . OP INFO ( cluster ): estructura de datos utilizada para identificar a una operaci\u00f3n/estaci\u00f3n. MachiningDateTime ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza pas\u00f3 por la estaci\u00f3n indicada. OperationData ( string ): DESCONOCIDO posible partData. Operation Status ( enum/int ): dato que indica el estado de la operaci\u00f3n en dicha pieza. UnitInfo ( array ): array de cluster que contiene los atributos reportados por dicha maquina para esa pieza en concreto. mensaje ( string ): valor devuelto por el servidor de QTS que indica si la llamada ha sido correcta ( OK ). GetFmiStatusCodesInformation Estructura de datos recibida al hacer la llamada a la funci\u00f3n GetFmiStatusCodesInformation . codigoAprobado ( int ): codigo utilizado para identificar cuando el FMI (Flexible Manual Inspection) est\u00e1 aprobado. codigoIncompleto ( int ): codigo utilizado para identificar cuando el FMI (Flexible Manual Inspection) est\u00e1 incompleto. codigoRechazado ( int ): codigo utilizado para identificar cuando el FMI (Flexible Manual Inspection) est\u00e1 rechazado. GetProcessDataHistory Estructura de datos utilizada para hacer las llamadas a las funciones de GetProcessDataHistory . Warning Sigue en desarrollo. OP INFO ( cluster ): estructura de datos utilizada para identificar a una operaci\u00f3n/estaci\u00f3n. partTypeCode ( enum/int ): dato que indica que tipo de ensamblado es. processDateTime ( Time Stamp ): fecha en la que la pieza fue procesada. palletID ( string ): pallet al que pertenece la pieza, si es que perteneciese a alguno. statusCode ( string ): DESCONOCIDO posible quarantinesatus o result enum? UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. uploadDateTime ( Time Stamp ): fecha en la que la pieza fue reportada. LookUpForParent Estructura de datos devuelta al hacer la llamada a la funci\u00f3n de LookUpForParent . hasParent ( boolean ): Valor de verdad que indica si la pieza esta ensamblada con otra ( true ) o no ( false ). ParentInfo ( cluster ): estructura de datos utilizada para identificar a una pieza, en este caso a la pieza que contiene la pieza consultada. PartUsage Estructura de datos obtenida al hacer la llamada a la funci\u00f3n de PartUsage . quarantineName ( string ): nombre de la cuarentena. quarantineStatus ( enum/int ): dato que indica el estado de la pieza. reuseCount ( int ): numero que indica la cantidad de veces que ha sido reusada dicha pieza. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza.","title":"Responses"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#responses","text":"Aqu\u00ed se encuentran detallados todos los posibles clusteres identificados como respuesta de alguna funci\u00f3n.","title":"Responses"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#quarantine","text":"Estructura de datos devuelta con las funciones de cuarentenas . Cuenta de reutilizacion ( int ): dato que indica cuantas veces se ha reutilizado esa pieza. Descripcion ( string ): breve explicaci\u00f3n del motivo de ese estado negativo. quarantineStatus ( enum/int ): dato que indica el estado de la pieza. ID cuarentena ( string ): valor que identifica a est\u00e1 cuarentena si la hay. Nombre de la cuarentena ( string ): nombre que se le pone a esta cuaretena, puede servir para identificarla de forma m\u00e1s sencilla. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. mensaje ( string ): valor devuelto por el servidor de QTS que indica si la llamada ha sido correcta ( OK ).","title":"Quarantine"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#getallstations","text":"Estructura de datos utilizada para hacer la llamada a la funci\u00f3n de GetAllStations . ID ( string ): identificador de la estaci\u00f3n. Descripcion ( string ): breve descripci\u00f3n de la estaci\u00f3n.","title":"GetAllStations"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#birthhistory","text":"Estructura de datos devuelta como respuesta al hacer las llamadas a las funciones de BirthHistory . dataDTS ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza entre o sale por la estaci\u00f3n indicada. OP INFO ( cluster ): estructura de datos utilizada para identificar a una operaci\u00f3n/estaci\u00f3n. quarantineStatus ( enum/int ): dato que indica el estado de la pieza. partData ( string ): DESCONOCIDO . UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. mensaje ( string ): valor devuelto por el servidor de QTS que indica si la llamada ha sido correcta ( OK ).","title":"BirthHistory"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#getoperationinfo","text":"Estructura de datos obtenida como respuesta al hacer las llamadas a las funciones de OperationStatus . fixtureNumber ( string ): DESCONOCIDO . OP INFO ( cluster ): estructura de datos utilizada para identificar a una operaci\u00f3n/estaci\u00f3n. MachiningDateTime ( Time Stamp ): dato que contiene una fecha y hora, habitualmente indica el momento en el que la pieza pas\u00f3 por la estaci\u00f3n indicada. OperationData ( string ): DESCONOCIDO posible partData. Operation Status ( enum/int ): dato que indica el estado de la operaci\u00f3n en dicha pieza. UnitInfo ( array ): array de cluster que contiene los atributos reportados por dicha maquina para esa pieza en concreto. mensaje ( string ): valor devuelto por el servidor de QTS que indica si la llamada ha sido correcta ( OK ).","title":"GetOperationInfo"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#getfmistatuscodesinformation","text":"Estructura de datos recibida al hacer la llamada a la funci\u00f3n GetFmiStatusCodesInformation . codigoAprobado ( int ): codigo utilizado para identificar cuando el FMI (Flexible Manual Inspection) est\u00e1 aprobado. codigoIncompleto ( int ): codigo utilizado para identificar cuando el FMI (Flexible Manual Inspection) est\u00e1 incompleto. codigoRechazado ( int ): codigo utilizado para identificar cuando el FMI (Flexible Manual Inspection) est\u00e1 rechazado.","title":"GetFmiStatusCodesInformation"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#getprocessdatahistory","text":"Estructura de datos utilizada para hacer las llamadas a las funciones de GetProcessDataHistory . Warning Sigue en desarrollo. OP INFO ( cluster ): estructura de datos utilizada para identificar a una operaci\u00f3n/estaci\u00f3n. partTypeCode ( enum/int ): dato que indica que tipo de ensamblado es. processDateTime ( Time Stamp ): fecha en la que la pieza fue procesada. palletID ( string ): pallet al que pertenece la pieza, si es que perteneciese a alguno. statusCode ( string ): DESCONOCIDO posible quarantinesatus o result enum? UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza. uploadDateTime ( Time Stamp ): fecha en la que la pieza fue reportada.","title":"GetProcessDataHistory"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#lookupforparent","text":"Estructura de datos devuelta al hacer la llamada a la funci\u00f3n de LookUpForParent . hasParent ( boolean ): Valor de verdad que indica si la pieza esta ensamblada con otra ( true ) o no ( false ). ParentInfo ( cluster ): estructura de datos utilizada para identificar a una pieza, en este caso a la pieza que contiene la pieza consultada.","title":"LookUpForParent"},{"location":"Docs/GettingStarted/LabVIEW/Clusters/resp.html#partusage","text":"Estructura de datos obtenida al hacer la llamada a la funci\u00f3n de PartUsage . quarantineName ( string ): nombre de la cuarentena. quarantineStatus ( enum/int ): dato que indica el estado de la pieza. reuseCount ( int ): numero que indica la cantidad de veces que ha sido reusada dicha pieza. UnitInfo ( cluster ): estructura de datos utilizada para identificar a una pieza.","title":"PartUsage"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html","text":"Private Functions Aqu\u00ed se encuentran detalladas las funciones privadas utilizadas en la librer\u00eda. ConstructArguments Aqu\u00ed se encuentran detalladas las funciones para transformar un Cluster a un objeto de .NET. AtributosClusterToNet Esta funci\u00f3n transforma un array de atributos (cluster) a un array de atributos (objeto .NET). Controls ArrayDeDatos ( array ): atributos que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeAtributos ( array ): atributos transformados a objetos de .NET. error out ( error_cluster ). ConstructResponse Aqu\u00ed se encuentran detalladas las funciones para transformar las respuestas recibidas como objetos de .NET a los clusteres dedicados. Quarantine Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de Quarantine a un cluster entendible por WrapperController. Controls CheckQuarantine ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators arrayDeRespuestas ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ). AllStations Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de GetAllStations a un cluster entendible por WrapperController. Controls RespuestaGetAllStations ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators Array ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ). BirthHistory Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de GetAllStations a un cluster entendible por WrapperController. Controls RespuestaBirthHistory in ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArraydeRespuestas ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ). OperationInfo Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de LookUpforParent a un cluster entendible por WrapperController. Controls GetOperationAttributes ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeRespuestasGetCurrentOperationStatus ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ). FmiStatusCodesInformation Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de GetFmiStatusCodesInformation a un cluster entendible por WrapperController. Controls RespuestaGetFmiStatusCodesInformation ( .NET Object ): respuesta que se quiere transformar. error in ( error_cluster ). Indicators respuestaGetFmiCodesInformation out ( cluster ): respuesta transformada y lista para ser usada. error out ( error_cluster ). ProcessDataHistory Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de ProcessDataHistory a un cluster entendible por WrapperController. Controls RespuestaGetProcessDataHistory ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeRespuestasGetProcessDataHistory ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ). LookUpForParent Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de LookUpforParent a un cluster entendible por WrapperController. Controls RespuestaLookUpForParent in ( .NET Object ): respuesta que se quiere transformar. error in ( error_cluster ). Indicators RespuestaLookUpForParent ( cluster ): respuesta transformada y lista para ser usada. error out ( error_cluster ). PartUsage Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de PartUsage a un cluster entendible por WrapperController. Controls RespuestaPartUsage in ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeRespuestasPartUsage ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"Private Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#private-functions","text":"Aqu\u00ed se encuentran detalladas las funciones privadas utilizadas en la librer\u00eda.","title":"Private Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#constructarguments","text":"Aqu\u00ed se encuentran detalladas las funciones para transformar un Cluster a un objeto de .NET.","title":"ConstructArguments"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#atributosclustertonet","text":"Esta funci\u00f3n transforma un array de atributos (cluster) a un array de atributos (objeto .NET). Controls ArrayDeDatos ( array ): atributos que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeAtributos ( array ): atributos transformados a objetos de .NET. error out ( error_cluster ).","title":"AtributosClusterToNet"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#constructresponse","text":"Aqu\u00ed se encuentran detalladas las funciones para transformar las respuestas recibidas como objetos de .NET a los clusteres dedicados.","title":"ConstructResponse"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#quarantine","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de Quarantine a un cluster entendible por WrapperController. Controls CheckQuarantine ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators arrayDeRespuestas ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"Quarantine"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#allstations","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de GetAllStations a un cluster entendible por WrapperController. Controls RespuestaGetAllStations ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators Array ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"AllStations"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#birthhistory","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de GetAllStations a un cluster entendible por WrapperController. Controls RespuestaBirthHistory in ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArraydeRespuestas ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"BirthHistory"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#operationinfo","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de LookUpforParent a un cluster entendible por WrapperController. Controls GetOperationAttributes ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeRespuestasGetCurrentOperationStatus ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"OperationInfo"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#fmistatuscodesinformation","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de GetFmiStatusCodesInformation a un cluster entendible por WrapperController. Controls RespuestaGetFmiStatusCodesInformation ( .NET Object ): respuesta que se quiere transformar. error in ( error_cluster ). Indicators respuestaGetFmiCodesInformation out ( cluster ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"FmiStatusCodesInformation"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#processdatahistory","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de ProcessDataHistory a un cluster entendible por WrapperController. Controls RespuestaGetProcessDataHistory ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeRespuestasGetProcessDataHistory ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"ProcessDataHistory"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#lookupforparent","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de LookUpforParent a un cluster entendible por WrapperController. Controls RespuestaLookUpForParent in ( .NET Object ): respuesta que se quiere transformar. error in ( error_cluster ). Indicators RespuestaLookUpForParent ( cluster ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"LookUpForParent"},{"location":"Docs/GettingStarted/LabVIEW/Functions/internal.html#partusage","text":"Esta funci\u00f3n tranforma la respuesta recibida directamente del servidor y de la libreria de WrapperLibrary al hacer la peticion de PartUsage a un cluster entendible por WrapperController. Controls RespuestaPartUsage in ( array ): respuestas que se quieren transformar. error in ( error_cluster ). Indicators ArrayDeRespuestasPartUsage ( array ): respuesta transformada y lista para ser usada. error out ( error_cluster ).","title":"PartUsage"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html","text":"Auxiliar Functions En este apartado podemos encontrar informaci\u00f3n relativa sobre funciones auxiliares que no hacen ning\u00fan tipo de uso del servicio de QTS pero que son utilzadas dentro de la libreria y que adem\u00e1s son de acceso publico. checkIpAddress Esta funci\u00f3n comprueba si el string pasado como entrada coincide con el formato de direcci\u00f3n IP. Controls input string ( string ): cadena de caracteres la cual se quiere comprobar que es una direcci\u00f3n IP. error in ( error_cluster ). Indicators after match ( string ): cadena de caracteres que coincide con la entrada o \" 0.0.0.0 \" en caso de direcci\u00f3n incorrecta. error out ( error_cluster ). EpochToTimestamp Esta funci\u00f3n convierte un n\u00famero a TimeStamp . Controls Timestamp ( string ): cadena de car\u00e1cteres que corresponde al n\u00famero que queremos convertir, internamente este string se tranforma a double . error in ( error_cluster ). Indicators Resultado ( Time Stamp ): fecha y hora correspondiente a dicho n\u00famero. error out ( error_cluster ). Convert_String_to_TimeStamp Esta funci\u00f3n convierte un string a TimeStamp . Formatos admitidos YYYY-MM-DD hh:mm:ss.fff YYYY-MM-DD hh:mm:ss DD/MM/YYYY hh:mm:ss hh:mm:ss,fff DD:MM:YYYY Controls date/time string ( string ): cadena de car\u00e1cteres con la fehca que queremos obtener. error in ( error_cluster ). Indicators Resulting Time Stamp ( Time Stamp ): fecha y hora correspondiente a dicho string . error out ( error_cluster ). createConfig Esta funci\u00f3n crea un archivo de configuraci\u00f3n en XML con todo lo necesario para hacer funcionar la librer\u00eda. Controls configOptions ( cluster ): cluster con los par\u00e1metros de la configuraci\u00f3n. destinationPath ( path ): direcci\u00f3n donde se almacenar\u00e1 el archivo y su nombre. error in ( error_cluster ). Indicators error out ( error_cluster ). readConfig Esta funci\u00f3n lee el archivo de configuraci\u00f3n en XML con todo lo necesario para hacer funcionar la librer\u00eda. Controls configWrapperFilePath ( path ): direcci\u00f3n donde se encuentra el archivo de configuraci\u00f3n. error in ( error_cluster ). Indicators config out ( cluster ): cluster con los par\u00e1metros de la configuraci\u00f3n. error out ( error_cluster ). TimeStampToDateTime121 Esta funci\u00f3n transforma una fecha a string n\u00famerico correspondiente al est\u00e1ndar 121. Controls Timestamp ( Time Stamp ): fecha que se quiere transformar. error in ( error_cluster ). Indicators config out ( string ): fecha en formato string. error out ( error_cluster ).","title":"Auxiliar Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#auxiliar-functions","text":"En este apartado podemos encontrar informaci\u00f3n relativa sobre funciones auxiliares que no hacen ning\u00fan tipo de uso del servicio de QTS pero que son utilzadas dentro de la libreria y que adem\u00e1s son de acceso publico.","title":"Auxiliar Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#checkipaddress","text":"Esta funci\u00f3n comprueba si el string pasado como entrada coincide con el formato de direcci\u00f3n IP. Controls input string ( string ): cadena de caracteres la cual se quiere comprobar que es una direcci\u00f3n IP. error in ( error_cluster ). Indicators after match ( string ): cadena de caracteres que coincide con la entrada o \" 0.0.0.0 \" en caso de direcci\u00f3n incorrecta. error out ( error_cluster ).","title":"checkIpAddress"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#epochtotimestamp","text":"Esta funci\u00f3n convierte un n\u00famero a TimeStamp . Controls Timestamp ( string ): cadena de car\u00e1cteres que corresponde al n\u00famero que queremos convertir, internamente este string se tranforma a double . error in ( error_cluster ). Indicators Resultado ( Time Stamp ): fecha y hora correspondiente a dicho n\u00famero. error out ( error_cluster ).","title":"EpochToTimestamp"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#convert_string_to_timestamp","text":"Esta funci\u00f3n convierte un string a TimeStamp . Formatos admitidos YYYY-MM-DD hh:mm:ss.fff YYYY-MM-DD hh:mm:ss DD/MM/YYYY hh:mm:ss hh:mm:ss,fff DD:MM:YYYY Controls date/time string ( string ): cadena de car\u00e1cteres con la fehca que queremos obtener. error in ( error_cluster ). Indicators Resulting Time Stamp ( Time Stamp ): fecha y hora correspondiente a dicho string . error out ( error_cluster ).","title":"Convert_String_to_TimeStamp"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#createconfig","text":"Esta funci\u00f3n crea un archivo de configuraci\u00f3n en XML con todo lo necesario para hacer funcionar la librer\u00eda. Controls configOptions ( cluster ): cluster con los par\u00e1metros de la configuraci\u00f3n. destinationPath ( path ): direcci\u00f3n donde se almacenar\u00e1 el archivo y su nombre. error in ( error_cluster ). Indicators error out ( error_cluster ).","title":"createConfig"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#readconfig","text":"Esta funci\u00f3n lee el archivo de configuraci\u00f3n en XML con todo lo necesario para hacer funcionar la librer\u00eda. Controls configWrapperFilePath ( path ): direcci\u00f3n donde se encuentra el archivo de configuraci\u00f3n. error in ( error_cluster ). Indicators config out ( cluster ): cluster con los par\u00e1metros de la configuraci\u00f3n. error out ( error_cluster ).","title":"readConfig"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/auxfunc.html#timestamptodatetime121","text":"Esta funci\u00f3n transforma una fecha a string n\u00famerico correspondiente al est\u00e1ndar 121. Controls Timestamp ( Time Stamp ): fecha que se quiere transformar. error in ( error_cluster ). Indicators config out ( string ): fecha en formato string. error out ( error_cluster ).","title":"TimeStampToDateTime121"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/basic.html","text":"Basic Functions Aqu\u00ed podemos encontrar todas aquellas funciones basicas para el control de la conexi\u00f3n con el servicio de QTS: creacion del Wrapper, establecer conexi\u00f3n, cerrar conexi\u00f3n y borrar instancia del objeto. ConfigurationWrapper Esta funci\u00f3n lo que hace principalmente es construir el cluster que ser\u00e1 necesario para hacer el resto de funciones adem\u00e1s de crear la instancia del objeto .NET Wrapper que ser\u00e1 el encargado de llevar a cabo todas las peticiones. Controls config ( cluster ): estructura de datos que sirve para configurar e instanciar todo lo necesario para hacer uso de la librer\u00eda. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error out ( error_cluster ). Connect Esta funci\u00f3n establece una conexi\u00f3n directa con el servidor de QTS, mediante la cual s llevaran a cabo todas las peticiones que se hagan sobre la libreria. Adem\u00e1s, dicha conexi\u00f3n se mantiene abierta hasta que se produzca un error o se lleve a cabo la funci\u00f3n close . Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error out ( error_cluster ). Close Esta funci\u00f3n cierra la conexi\u00f3n con el servidor de QTS. Dejando inservible el cluster basicInformation . Tip Llevar a cabo siempre, desp\u00faes de hacer el Close, un DeleteReference . Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error out ( error_cluster ). DeleteReference Esta funci\u00f3n elimina la referencia del objeto Wrapper de .NET para que no ocupe espacio en memoria. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in ( error_cluster ). Indicators error out ( error_cluster ).","title":"Basic Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/basic.html#basic-functions","text":"Aqu\u00ed podemos encontrar todas aquellas funciones basicas para el control de la conexi\u00f3n con el servicio de QTS: creacion del Wrapper, establecer conexi\u00f3n, cerrar conexi\u00f3n y borrar instancia del objeto.","title":"Basic Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/basic.html#configurationwrapper","text":"Esta funci\u00f3n lo que hace principalmente es construir el cluster que ser\u00e1 necesario para hacer el resto de funciones adem\u00e1s de crear la instancia del objeto .NET Wrapper que ser\u00e1 el encargado de llevar a cabo todas las peticiones. Controls config ( cluster ): estructura de datos que sirve para configurar e instanciar todo lo necesario para hacer uso de la librer\u00eda. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error out ( error_cluster ).","title":"ConfigurationWrapper"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/basic.html#connect","text":"Esta funci\u00f3n establece una conexi\u00f3n directa con el servidor de QTS, mediante la cual s llevaran a cabo todas las peticiones que se hagan sobre la libreria. Adem\u00e1s, dicha conexi\u00f3n se mantiene abierta hasta que se produzca un error o se lleve a cabo la funci\u00f3n close . Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error out ( error_cluster ).","title":"Connect"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/basic.html#close","text":"Esta funci\u00f3n cierra la conexi\u00f3n con el servidor de QTS. Dejando inservible el cluster basicInformation . Tip Llevar a cabo siempre, desp\u00faes de hacer el Close, un DeleteReference . Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error out ( error_cluster ).","title":"Close"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/basic.html#deletereference","text":"Esta funci\u00f3n elimina la referencia del objeto Wrapper de .NET para que no ocupe espacio en memoria. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in ( error_cluster ). Indicators error out ( error_cluster ).","title":"DeleteReference"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html","text":"Functions Aqu\u00ed podemos encontrar todas aquellas funciones para hacer uso del servicio de QTS: BirthHstory, Quarantine, FMI... BirthHistory Functions GetBirthHistory Esta funci\u00f3n obtiene el BirthHistory de una pieza, obteniendo as\u00ed la fecha del paso de dicha pieza por una maquina especifica. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosGetBirthHistory ( cluster ): contiene los datos necesarios relacionados con la pieza a consultar. Cluster variables required dataDTS palletID partTypeCode partTypeCodeSpecified PartData UniClassification Result UnitInfo error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArraydeRespuestas out ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). SetBirthHistoryData Esta funci\u00f3n modifica el atributo PartData de un BirthHistory dada una pieza y una estaci\u00f3n. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosSetBirthHistory ( cluster ): contiene los datos necesarios relacionados con la pieza a consultar. Cluster variables required dataDTS palletID partTypeCode partTypeCodeSpecified PartData UniClassification Result UnitInfo datos ( cluster ): contiene la informaci\u00f3n relativa a los atributos de esa pieza. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArraydeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). UploadBirthHistory Esta funci\u00f3n es utilizada para reportar via QTS el paso de una pieza por una m\u00e1quina. Es as\u00ed una de las principales funciones de la librer\u00eda. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosUploadBirthHistory ( cluster ): contiene los datos necesarios relacionados con la pieza a consultar. Cluster variables required dataDTS palletID ( optional ) partTypeCode ( optional ) partTypeCodeSpecified PartData ( optional ) UniClassification Result UnitInfo datos ( array ): contiene la informaci\u00f3n relativa a los atributos de esa pieza. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArraydeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). OperationInfo Functions GetOperationAttributes Esta funci\u00f3n es utilizada para consultar via QTS el paso de una pieza por una m\u00e1quina. Pudiendo obtener toda la informaci\u00f3n relativa, incluidos los atributos. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. argumentosGetCurrentOperationStatus ( cluster ): contiene los datos necesarios para hacer la consulta. atributos ( array ): identificadores de los atributos que queremos consultar. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetCurrentOperationStatus ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetOperationOptionalData Esta funci\u00f3n es utilizada para consultar via QTS el paso de una pieza por una m\u00e1quina. Obteniendo unicamente el optional data. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. argumentosGetCurrentOperationStatus ( cluster ): contiene los datos necesarios para hacer la consulta. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetCurrentOperationStatus ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetOperationStatus Esta funci\u00f3n es utilizada para consultar via QTS el paso de una pieza por una m\u00e1quina. Obteniendo la informaci\u00f3n relativa al reporte excepto los atributos. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. argumentosGetCurrentOperationStatus ( cluster ): contiene los datos necesarios para hacer la consulta. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetCurrentOperationStatus ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). Quarantine Functions CheckQuarantine Mediante esta funci\u00f3n podemos consultar o chequear el estado de la pieza. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( array ): contiene los datos que identifican a la pieza. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). FromQuarantineToScrap Mediante esta funci\u00f3n podemos pasar una pieza en cuarentena al estado de scrap o chatarra. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( array ): contiene los datos que identifican a la pieza. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetQuarantineList Mediante esta funci\u00f3n podemos obtener las cuarentenas de un modelo. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. unitType/WERS ( string ): identificaci\u00f3n de modelo. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetScrapList Esta funci\u00f3n obtiene todas las piezas catalogadas como chatarra dado un modelo. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. unitType/WERS ( string ): identificador del modelo. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). RemoveQuarantine Esta funci\u00f3n elimina la cuarentena de un conjunto de piezas dadas. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( array ): contiene los datos que identifican a la pieza. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). SetQuarantine Mediante esta funci\u00f3n podemos establer un estado de cuarentena ( Quarantine o Scrap ) a una pieza. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosCuarentena ( array ): contiene todos los datos necesarios para hacer la llamada (id, estado, descripci\u00f3n...). error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). Other Functions FlexibleManualInspection FLEXIBLE MANUAL INSPECTION. Warning sigue en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. respuestaFlexibleManualInspection ( cluster ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetAllStations Mediante esta funci\u00f3n podemos obtener todas las estaciones dadas de alta en QLSCM. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeStations ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetFmiHhConfiguration Obtiene la configuraci\u00f3n actual del FMI Handheld. Warning Sigue en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. direccionIP ( string ): DESCONOCIDO . error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. RespuestaGetFmiHhConfiguration ( .NET object ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetFmiStatusCodesInformation Obtiene los codigos utilizados para representar los distintos estados del FMI. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. respuestaGetFmiCodesInformation out ( cluster ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetProcessDataHistoryWithoutRangeOfDate Obtiene el historial de piezas que han pasado por una m\u00e1quina en concreto. Warning en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosGetProcessDataHistory ( cluster ): parametros necesarios para hacer la llamada. Cluster variables required stationID maxRows fromDate toDate error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetProcessDataHistory ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). GetProcessDataHistoryWithRangeOfDate Obtiene el historial de piezas que han pasado por una m\u00e1quina en concreto. Warning en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosGetProcessDataHistory ( cluster ): parametros necesarios para hacer la llamada. Cluster variables required stationID maxRows fromDate toDate error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetProcessDataHistory ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ). Heartbeat Manda un latido al servidor y espera la respuesta, sirve para comprobar que el servicio sigue activo. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. heartbeat ( boolean ): valor de verdad que indica si sigue activo el servicio de QTS ( true ) o no ( false ). error out ( error_cluster ). LookUpForParent Comprueba si dicha pieza est\u00e1 ensamblada en alguna otra, sienda est\u00e1 ultima lo denominado como \"Parent\" . Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. componentId ( string ): identificador de la pieza de la cual se quiere saber si es componente de otra mayor (parent). error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. RespuestaLookUpForParent ( cluster ): respuesta con la informacion devuelta por el servidor. error out ( error_cluster ). PartUsage Funci\u00f3n que comprueba la cantidad de veces que una pieza ha sido reutilizada, dicha funci\u00f3n tiene sentido a la hora de hablar de cuarentenas, donde una pieza ensamblada en otra en cuarentena es reutilizada. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( cluster ): identificador de la pieza de la cual se quiere saber la cantidad de veces que ha sido reutilizada. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasPartUsage ( array ): array con las respuestas recibidas. error out ( error_cluster ). TestCurrentSettingDatabaseConnection Funci\u00f3n que comprueba si la configuraci\u00f3n de conexi\u00f3n actual a la base de datos funciona correctamente. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. isCorrectConfiguration ( boolean ): valor de verdad que indica si la configuraci\u00f3n es correcta ( true ) o no ( false ). error out ( error_cluster ). TestSettingDatabaseConnection Funci\u00f3n que sirve para probar una nueva configuraci\u00f3n para la conexion con la base de datos. Warning en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosTestDatabaseConnection ( cluster ): identificador de la pieza de la cual se quiere saber la cantidad de veces que ha sido reutilizada. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. isCompletedConnectionSuccesfully ( boolean ): valor de verdad que indica si la configuraci\u00f3n es correcta ( true ) o no ( false ). error out ( error_cluster ).","title":"Principal Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#functions","text":"Aqu\u00ed podemos encontrar todas aquellas funciones para hacer uso del servicio de QTS: BirthHstory, Quarantine, FMI...","title":"Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#birthhistory-functions","text":"","title":"BirthHistory Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getbirthhistory","text":"Esta funci\u00f3n obtiene el BirthHistory de una pieza, obteniendo as\u00ed la fecha del paso de dicha pieza por una maquina especifica. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosGetBirthHistory ( cluster ): contiene los datos necesarios relacionados con la pieza a consultar. Cluster variables required dataDTS palletID partTypeCode partTypeCodeSpecified PartData UniClassification Result UnitInfo error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArraydeRespuestas out ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetBirthHistory"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#setbirthhistorydata","text":"Esta funci\u00f3n modifica el atributo PartData de un BirthHistory dada una pieza y una estaci\u00f3n. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosSetBirthHistory ( cluster ): contiene los datos necesarios relacionados con la pieza a consultar. Cluster variables required dataDTS palletID partTypeCode partTypeCodeSpecified PartData UniClassification Result UnitInfo datos ( cluster ): contiene la informaci\u00f3n relativa a los atributos de esa pieza. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArraydeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"SetBirthHistoryData"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#uploadbirthhistory","text":"Esta funci\u00f3n es utilizada para reportar via QTS el paso de una pieza por una m\u00e1quina. Es as\u00ed una de las principales funciones de la librer\u00eda. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosUploadBirthHistory ( cluster ): contiene los datos necesarios relacionados con la pieza a consultar. Cluster variables required dataDTS palletID ( optional ) partTypeCode ( optional ) partTypeCodeSpecified PartData ( optional ) UniClassification Result UnitInfo datos ( array ): contiene la informaci\u00f3n relativa a los atributos de esa pieza. error in ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArraydeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"UploadBirthHistory"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#operationinfo-functions","text":"","title":"OperationInfo Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getoperationattributes","text":"Esta funci\u00f3n es utilizada para consultar via QTS el paso de una pieza por una m\u00e1quina. Pudiendo obtener toda la informaci\u00f3n relativa, incluidos los atributos. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. argumentosGetCurrentOperationStatus ( cluster ): contiene los datos necesarios para hacer la consulta. atributos ( array ): identificadores de los atributos que queremos consultar. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetCurrentOperationStatus ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetOperationAttributes"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getoperationoptionaldata","text":"Esta funci\u00f3n es utilizada para consultar via QTS el paso de una pieza por una m\u00e1quina. Obteniendo unicamente el optional data. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. argumentosGetCurrentOperationStatus ( cluster ): contiene los datos necesarios para hacer la consulta. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetCurrentOperationStatus ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetOperationOptionalData"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getoperationstatus","text":"Esta funci\u00f3n es utilizada para consultar via QTS el paso de una pieza por una m\u00e1quina. Obteniendo la informaci\u00f3n relativa al reporte excepto los atributos. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. argumentosGetCurrentOperationStatus ( cluster ): contiene los datos necesarios para hacer la consulta. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetCurrentOperationStatus ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetOperationStatus"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#quarantine-functions","text":"","title":"Quarantine Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#checkquarantine","text":"Mediante esta funci\u00f3n podemos consultar o chequear el estado de la pieza. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( array ): contiene los datos que identifican a la pieza. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"CheckQuarantine"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#fromquarantinetoscrap","text":"Mediante esta funci\u00f3n podemos pasar una pieza en cuarentena al estado de scrap o chatarra. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( array ): contiene los datos que identifican a la pieza. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"FromQuarantineToScrap"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getquarantinelist","text":"Mediante esta funci\u00f3n podemos obtener las cuarentenas de un modelo. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. unitType/WERS ( string ): identificaci\u00f3n de modelo. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetQuarantineList"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getscraplist","text":"Esta funci\u00f3n obtiene todas las piezas catalogadas como chatarra dado un modelo. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. unitType/WERS ( string ): identificador del modelo. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetScrapList"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#removequarantine","text":"Esta funci\u00f3n elimina la cuarentena de un conjunto de piezas dadas. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( array ): contiene los datos que identifican a la pieza. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"RemoveQuarantine"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#setquarantine","text":"Mediante esta funci\u00f3n podemos establer un estado de cuarentena ( Quarantine o Scrap ) a una pieza. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosCuarentena ( array ): contiene todos los datos necesarios para hacer la llamada (id, estado, descripci\u00f3n...). error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. arrayDeRespuestas ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"SetQuarantine"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#other-functions","text":"","title":"Other Functions"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#flexiblemanualinspection","text":"FLEXIBLE MANUAL INSPECTION. Warning sigue en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. respuestaFlexibleManualInspection ( cluster ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"FlexibleManualInspection"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getallstations","text":"Mediante esta funci\u00f3n podemos obtener todas las estaciones dadas de alta en QLSCM. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeStations ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetAllStations"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getfmihhconfiguration","text":"Obtiene la configuraci\u00f3n actual del FMI Handheld. Warning Sigue en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. direccionIP ( string ): DESCONOCIDO . error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. RespuestaGetFmiHhConfiguration ( .NET object ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetFmiHhConfiguration"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getfmistatuscodesinformation","text":"Obtiene los codigos utilizados para representar los distintos estados del FMI. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. respuestaGetFmiCodesInformation out ( cluster ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetFmiStatusCodesInformation"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getprocessdatahistorywithoutrangeofdate","text":"Obtiene el historial de piezas que han pasado por una m\u00e1quina en concreto. Warning en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosGetProcessDataHistory ( cluster ): parametros necesarios para hacer la llamada. Cluster variables required stationID maxRows fromDate toDate error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetProcessDataHistory ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetProcessDataHistoryWithoutRangeOfDate"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#getprocessdatahistorywithrangeofdate","text":"Obtiene el historial de piezas que han pasado por una m\u00e1quina en concreto. Warning en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosGetProcessDataHistory ( cluster ): parametros necesarios para hacer la llamada. Cluster variables required stationID maxRows fromDate toDate error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasGetProcessDataHistory ( array ): informaci\u00f3n devuelta por el servidor al hacer la consulta. error out ( error_cluster ).","title":"GetProcessDataHistoryWithRangeOfDate"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#heartbeat","text":"Manda un latido al servidor y espera la respuesta, sirve para comprobar que el servicio sigue activo. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. heartbeat ( boolean ): valor de verdad que indica si sigue activo el servicio de QTS ( true ) o no ( false ). error out ( error_cluster ).","title":"Heartbeat"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#lookupforparent","text":"Comprueba si dicha pieza est\u00e1 ensamblada en alguna otra, sienda est\u00e1 ultima lo denominado como \"Parent\" . Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. componentId ( string ): identificador de la pieza de la cual se quiere saber si es componente de otra mayor (parent). error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. RespuestaLookUpForParent ( cluster ): respuesta con la informacion devuelta por el servidor. error out ( error_cluster ).","title":"LookUpForParent"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#partusage","text":"Funci\u00f3n que comprueba la cantidad de veces que una pieza ha sido reutilizada, dicha funci\u00f3n tiene sentido a la hora de hablar de cuarentenas, donde una pieza ensamblada en otra en cuarentena es reutilizada. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. UnitInfo ( cluster ): identificador de la pieza de la cual se quiere saber la cantidad de veces que ha sido reutilizada. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. ArrayDeRespuestasPartUsage ( array ): array con las respuestas recibidas. error out ( error_cluster ).","title":"PartUsage"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#testcurrentsettingdatabaseconnection","text":"Funci\u00f3n que comprueba si la configuraci\u00f3n de conexi\u00f3n actual a la base de datos funciona correctamente. Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. isCorrectConfiguration ( boolean ): valor de verdad que indica si la configuraci\u00f3n es correcta ( true ) o no ( false ). error out ( error_cluster ).","title":"TestCurrentSettingDatabaseConnection"},{"location":"Docs/GettingStarted/LabVIEW/Functions/PublicFunctions/funcs.html#testsettingdatabaseconnection","text":"Funci\u00f3n que sirve para probar una nueva configuraci\u00f3n para la conexion con la base de datos. Warning en desarrollo Controls basicInformation in ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. parametrosTestDatabaseConnection ( cluster ): identificador de la pieza de la cual se quiere saber la cantidad de veces que ha sido reutilizada. error in (no error) ( error_cluster ). Indicators basicInformation out ( cluster ): estructura de datos que contiene la informaci\u00f3n basica para poder hacer las llamadas a las funciones. isCompletedConnectionSuccesfully ( boolean ): valor de verdad que indica si la configuraci\u00f3n es correcta ( true ) o no ( false ). error out ( error_cluster ).","title":"TestSettingDatabaseConnection"},{"location":"Docs/GettingStarted/NET/funcs.html","text":"Wrapper's Functions Connection Functions Abort Cierra la conexion con el servidor de forma abrupta, sin esperar la respuesta. Esto es bueno cuando queremos controlar el cierre de la aplicacion, debido a que en estos casos quieres cerrar la aplicaci\u00f3n de forma rapida y eficaz y no esperar a las respuestas pendientes del servidor. 1 public void Abort () Open Establece la conexion con el servidor, abre un canal de comunicacion con el servidor. En caso de no poder establecer la conexi\u00f3n con el servidor, por ejemplo debido a la perdida de conexion red, lanza una excepci\u00f3n: PingException . 1 public void Open () Close Cierra la conexion con el servidor, cerrando asi el canal que habia abierto, este cierre solo se hace efecivo cuando se hayan recibido todas las respuestas pendientes. 1 public void Close () Heartbeat M\u00e9todo que comprueba mediante el envio de un mensaje sencillo si el servidor esta en funcionamiento y si esta funcionando correctamente. Dicha funci\u00f3n tiene que ser realizada cada minuto si hay una conexi\u00f3n abierta sin ser usada para comprobar que sigue en funcionamiento. Parameters dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return bool : valor de verdad indicando si responde el servidor ( true ) o no ( false ). 1 public bool Heartbeat ( int dataSourceID , int nodeId , int transaction ) BirthHistory Functions SetBirthHistoryPartData Metodo que a\u00f1ade al Birthhistory de una pieza datos relacionados con los atributos. Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationID ( string ): identificador de la operaci\u00f3n la cual se va a reportar. stationID ( string ): identificador de la estaci\u00f3n la cual va a ser reportada. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaBirthHistory [] : array que contiene las respuestas recibidas, normalmente suele ser una \u00fanica respuesta. 1 2 3 public RespuestaBirthHistory [] SetBirthHistoryPartData ( string unitId , string wers , string operationID , string stationID , int dataSourceId , int nodeId , int transaction ) GetBirthHistoryPartData Metodo que obtiene el PartData relativo a la maquina indicada sobre una pieza dada. Parameters unitId ( string ): identificador de la pieza. wers ( string ): Tipo de la pieza (WERS). operation ( string ): identificador de la operaci\u00f3n la cual se va a consultar. station ( string ): identificador de la estaci\u00f3n la cual va a ser consultada. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaBirthHistory [] : array que contiene las respuestas recibidas, una por cada paso de la pieza por esa m\u00e1quina. 1 2 3 public RespuestaBirthHistory [] GetBirthHistoryPartData ( string unitId , string wers , string operation , string station , int dataSourceId , int nodeId , int transaction ) UploadBirthHistory Metodo que obtiene el PartData relativo a la maquina indicada sobre una pieza dada. Parameters layoutId ( int ): identificador del mapa de atributos subido por esa m\u00e1quina. layoutVersion ( int ): valor que indica la versi\u00f3n del layout anteriormente indicado. fecha ( string ): fecha en el formato indicado en la propiedad del objeto. Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . operationId ( string ): identificador de la operaci\u00f3n la cual se va a reportar. stationId ( string ): identificador de la estaci\u00f3n la cual va a ser reportada. palletId ( string ): identificador del pallet, esto es utilizado en almac\u00e9n, no en mecanizado. partData ( string ): informaci\u00f3n definida por producci\u00f3n dependiendo de la m\u00e1quina, pieza, modelo, etc. partTypeCode ( int ): indica que tipo de componente es. PartTypeCode values Puede ver los valores admitidos por el servicio aqu\u00ed . partTypeCodeSpecified ( bool ): valor de verdad que indica si ha sido especificado true o no false el tipo de componente. unitClassification ( ClassificationUnit ): enumerdor que indica que clase de pieza es. UnitClasiification values Puede ver los valores admitidos por el servicio aqu\u00ed (LabVIEW definition) o aqu\u00ed (C# .NET definition) . unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). unitResult ( int ): valor que indica cual ha sido el resultado de la operaci\u00f3n sobre esa pieza. UnitResult values Puede ver los valores admitidos por el servicio aqu\u00ed . atributos ( Atributo [] ): array de Atributos los cuales indican las caracteristicas de calidad de ese proceso. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaBirthHistory [] : array que contiene las respuestas recibidas, solo con un unico elemento dentro del array. 1 2 3 4 5 6 public RespuestaBirthHistory [] UploadBirthHistory ( int layoutId , int layoutVersion , string fecha , string operationId , string stationId , string palletId , string partData , int partTypeCode , bool partTypeCodeSpecified , ClassificationUnit unitClassification , string unitId , string wers , int unitResult , Atributo [] atributos , int dataSourceId , int nodeId , int transaction ) Operation Info Functions GetOperationStatus Metodo que obtiene la infmacion de estado de una pieza por el paso de una operacion y estacion dada. Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationsId ( string [] ): array de identificadores de operaciones a consultar. stationsId ( string [] ): array de identificadores de estaciones a ser consultadas. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaOperationInfo [] : Array de RespuestaOperationInfo con la informacion de la pieza al paso por las diversas maquinas. 1 2 3 public RespuestaOperationInfo [] GetOperationStatus ( string unitId , string wers , string [] operationsId , string [] stationsId , int dataSourceId , int nodeId , int transaction ) GetOperationAttributes Metodo que obtiene el estado y los atributos de una pieza al paso por una operacion y estacion dada. Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationsId ( string [] ): array de identificadores de operaciones a consultar. stationsId ( string [] ): array de identificadores de estaciones a ser consultadas. atributos ( int [] ): array de identificadores los atributos que queremos obtener. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaOperationInfo [] : Array de RespuestaOperationInfo con la informacion de la pieza al paso por las diversas maquinas. 1 2 3 public RespuestaOperationInfo [] GetOperationAttributes ( string unitId , string wers , string [] operationsId , string [] stationsId , int [] atributos , int dataSourceId , int nodeId , int transaction ) GetOperationOptionalData Metodo que obtiene el estado de una pieza al paso por una operacion y estacion dada. En desarrollo Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationsId ( string [] ): array de identificadores de operaciones a consultar. stationsId ( string [] ): array de identificadores de estaciones a ser consultadas. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaOperationInfo [] : Array de RespuestaOperationInfo con la informacion de la pieza al paso por las diversas maquinas. 1 2 3 public RespuestaOperationInfo [] GetOperationOptionalData ( string unitId , string wers , string [] operationsId , string [] stationsId , int dataSourceId , int nodeId , int transaction ) Quarantine Functions RemoveQuarantine Metodo que elimina cualquier estado de cuarentena (cuarentena/chatarra) de una pieza dada. Parameters unitIds ( string [] ): array de identificadores de piezas. wers ( string [] ): array de tipos de piezas (WERS). dataSource ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine . 1 2 public RespuestaQuarantine [] RemoveQuarantine ( string [] unitIds , string [] wers , int datasource , int nodeId , int transaction ) MoveFromQuarantineToScrap Metodo que cambia el estado de Cuarentena a Chatarra de unas piezas. Parameters unitIds ( string [] ): array de identificadores de piezas. wers ( string [] ): array de tipos de piezas (WERS). dataSource ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine . 1 2 public RespuestaQuarantine [] MoveFromQuarantineToScrap ( string [] unitIds , string [] wers , int datasource , int nodeId , int transaction ) SetQuarantine Metodo que define el estado de cuarentena de varias piezas dadas. Parameters descripcion ( string ): breve explicaci\u00f3n de porque la pieza esta en ese estado negativo. operacion ( string ): identificador de la operacion que define dicho estado. fechas ( string ): fecha del momento en que se define dicho estado. Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . estado ( int ): valor que indica en que estado de cuarentena se encunetra/encuentran la/s pieza/s. QuarantineStatus values Puede ver los valores admitidos por el servicio aqu\u00ed . unitIds ( string [] ): array de identificadores de piezas. wers ( string [] ): array de tipos de piezas (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine . 1 2 3 public RespuestaQuarantine [] SetQuarantine ( string descripcion , string operacion , string fechas , int estado , string [] unitIds , string [] wers , int dataSourceId , int nodeId , int transaction ) GetScrapList Metodo que obtiene dado un tipo de pieza una lista de piezas en estado de chatarra. Parameters unitType ( string ): tipo de pieza (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine con la informacion de las piezas en chatarra. 1 2 public RespuestaQuarantine [] GetScrapList ( string unitType , int dataSourceId , int nodeId , int transaction ) GetQuarantineList Metodo que obtiene dado un tipo de pieza una lista de las piezas en cuaretena. Parameters unitType ( string ): tipo de pieza (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine con la informacion de las piezas en cuarentena. 1 2 public RespuestaQuarantine [] GetQuarantineList ( string unitType , int dataSourceId , int nodeId , int transaction ) CheckQuarantine Metodo que dado una pieza nos dice el estado de dicha pieza, si esta o no en cuarentena o chatarra. Parameters unitIds ( string [] ): array de identificadores de las piezas a consultar. wers ( string [] ): array de los tipos de piezas (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine con la informacion de las piezas. 1 2 public RespuestaQuarantine [] CheckQuarantine ( string [] unitIds , string [] wers , int dataSourceId , int nodeId , int transaction ) GetAllStations Metodo que envia la peticion al servidor QTS para obtener la informaci\u00f3n de todas las estaciones dadas de alta en el servidor. Return RespuestaGetAllStations [] : array de RespuestasGetAllStations donde cada elemento de la array es una estacion distinta. 1 public RespuestaGetAllStations [] GetAllStations () TestSettingsDatabaseConnection Overloads TestSettingsDatabaseConnection() : metodo que comprueba si la configuracion actual para realizar la conexion con la base de datos es correcta o no. 1 public bool TestSettingsDatabaseConnection () TestSettingsDatabaseConnection(string connection, int provider) : metodo que comprueba si la configuracion pasada como arguemento para realizar la conexion con la base de datos es correcta o no. en desarrollo Parameters connection ( string ): DESCONOCIDO . provider ( int ): DESCONOCIDO . 1 2 public bool TestSettingsDatabaseConnection ( string connection , int provider ) Return bool : Valor de verdad que indica si funciona true o no false la configuracion con la base de datos. GetProcessDataHistory Overloads GetProcessDataHistory(string[] idStations, string fromDate, string toDate, int maxRows) : m\u00e9todo que obtiene el historico de un proceso indicando de que estaciones se quiere obtener y desde que fecha hasta que fecha, indicando un maximo de recepcion. Parameters idStations ( string [] ): identificadores de las estaciones a consultar. fromDate ( string ): desde que fecha se quiere los datos. toDate ( string ): hasta que fecha se desea consultar. Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . maxRows ( int ): n\u00famero m\u00e1ximo de respuestas. 1 2 public RespuestaGetProcessDataHistory [] GetProcessDataHistory ( string [] idStations , string fromDate , string toDate , int maxRows ) GetProcessDataHistory(string[] idStations, int maxRows) : m\u00e9todo que obtiene el historico de un proceso indicando de que estaciones se quiere obener y un m\u00e1ximo de informacion obtenida. Parameters idStations ( string [] ): identificadores de las estaciones a consultar. maxRows ( int ): n\u00famero m\u00e1ximo de respuestas. 1 2 public RespuestaGetProcessDataHistory [] GetProcessDataHistory ( string [] idStations , int maxRows ) Return RespuestaGetProcessDataHistory [] : Array de RespuestaGetProcessDataHistory que contiene cada uno la informacion relativa al proceso consultado. LookUpForParent M\u00e9todo que comprueba si la pieza consultada es componente de una mayor (Parent). Parameters componentId ( string ): identificador de la pieza a consultar (equivalente a unitID). nodeId ( int ): identificador del nodo/coprocessor. Return RespuestaLookUpForParent : objeto del tipo RespuestaLookUpForParent que contiene un booleano que indica si tiene Parent, y dos atributos con informacion de dicho Parent. 1 2 public RespuestaLookUpForParent LookUpForParent ( string componentId , int nodeId ) PartUsage M\u00e9todo que comprueba cuantas veces ha sido reutilizada una mias pieza. Parameters unitId ( string ): identificador de la pieza a consultar (equivalente a unitID). wers ( string ): tipo de la pieza (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaPartUsage [] : array de RespuestaPartUsage que contiene la informaci\u00f3n solicitada. 1 2 public RespuestaPartUsage [] PartUsage ( string unitId , string wers , int dataSourceId , int nodeId , int transaction ) FMI FlexibleManualInspection M\u00e9todo que reporta una inspection manual flexible (FMI). Warning en desarrollo Parameters dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaFlexibleManualInspection : array de RespuestaFlexibleManualInspection que contiene la informaci\u00f3n devuelta por el servicio. 1 2 public RespuestaFlexibleManualInspection FlexibleManualInspection ( int dataSourceId , int nodeId , int transaction ) GetFmiHhConfiguration M\u00e9todo que obtiene la configuracion del FMI HandHeld dada una IP. Warning en desarrollo Parameters dirIp ( string ): direcci\u00f3n IP del HanHeld a consultar. Return RespuestaGetFmiHhConfiguration : Objeto del tipo RespuestaGetFmiHhConfiguration con la informacion de la respuesta. 1 public RespuestaGetFmiHhConfiguration GetFmiHhConfiguration ( string dirIp ) GetFmiStatusCodesInformation M\u00e9todo que obtiene la informacion sobre que codigos de estado sobre FMI existen en ese momento. Return RespuestaGetFmistatusCodesInformation : objeto del tipo RespuestaGetFmistatusCodesInformation que contiene dichos codigos como atributos. 1 public RespuestaGetFmiStatusCodesInformation GetFmiStatusCodesInformation ()","title":"Functions"},{"location":"Docs/GettingStarted/NET/funcs.html#wrappers-functions","text":"","title":"Wrapper's Functions"},{"location":"Docs/GettingStarted/NET/funcs.html#connection-functions","text":"","title":"Connection Functions"},{"location":"Docs/GettingStarted/NET/funcs.html#abort","text":"Cierra la conexion con el servidor de forma abrupta, sin esperar la respuesta. Esto es bueno cuando queremos controlar el cierre de la aplicacion, debido a que en estos casos quieres cerrar la aplicaci\u00f3n de forma rapida y eficaz y no esperar a las respuestas pendientes del servidor. 1 public void Abort ()","title":"Abort"},{"location":"Docs/GettingStarted/NET/funcs.html#open","text":"Establece la conexion con el servidor, abre un canal de comunicacion con el servidor. En caso de no poder establecer la conexi\u00f3n con el servidor, por ejemplo debido a la perdida de conexion red, lanza una excepci\u00f3n: PingException . 1 public void Open ()","title":"Open"},{"location":"Docs/GettingStarted/NET/funcs.html#close","text":"Cierra la conexion con el servidor, cerrando asi el canal que habia abierto, este cierre solo se hace efecivo cuando se hayan recibido todas las respuestas pendientes. 1 public void Close ()","title":"Close"},{"location":"Docs/GettingStarted/NET/funcs.html#heartbeat","text":"M\u00e9todo que comprueba mediante el envio de un mensaje sencillo si el servidor esta en funcionamiento y si esta funcionando correctamente. Dicha funci\u00f3n tiene que ser realizada cada minuto si hay una conexi\u00f3n abierta sin ser usada para comprobar que sigue en funcionamiento. Parameters dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return bool : valor de verdad indicando si responde el servidor ( true ) o no ( false ). 1 public bool Heartbeat ( int dataSourceID , int nodeId , int transaction )","title":"Heartbeat"},{"location":"Docs/GettingStarted/NET/funcs.html#birthhistory-functions","text":"","title":"BirthHistory Functions"},{"location":"Docs/GettingStarted/NET/funcs.html#setbirthhistorypartdata","text":"Metodo que a\u00f1ade al Birthhistory de una pieza datos relacionados con los atributos. Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationID ( string ): identificador de la operaci\u00f3n la cual se va a reportar. stationID ( string ): identificador de la estaci\u00f3n la cual va a ser reportada. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaBirthHistory [] : array que contiene las respuestas recibidas, normalmente suele ser una \u00fanica respuesta. 1 2 3 public RespuestaBirthHistory [] SetBirthHistoryPartData ( string unitId , string wers , string operationID , string stationID , int dataSourceId , int nodeId , int transaction )","title":"SetBirthHistoryPartData"},{"location":"Docs/GettingStarted/NET/funcs.html#getbirthhistorypartdata","text":"Metodo que obtiene el PartData relativo a la maquina indicada sobre una pieza dada. Parameters unitId ( string ): identificador de la pieza. wers ( string ): Tipo de la pieza (WERS). operation ( string ): identificador de la operaci\u00f3n la cual se va a consultar. station ( string ): identificador de la estaci\u00f3n la cual va a ser consultada. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaBirthHistory [] : array que contiene las respuestas recibidas, una por cada paso de la pieza por esa m\u00e1quina. 1 2 3 public RespuestaBirthHistory [] GetBirthHistoryPartData ( string unitId , string wers , string operation , string station , int dataSourceId , int nodeId , int transaction )","title":"GetBirthHistoryPartData"},{"location":"Docs/GettingStarted/NET/funcs.html#uploadbirthhistory","text":"Metodo que obtiene el PartData relativo a la maquina indicada sobre una pieza dada. Parameters layoutId ( int ): identificador del mapa de atributos subido por esa m\u00e1quina. layoutVersion ( int ): valor que indica la versi\u00f3n del layout anteriormente indicado. fecha ( string ): fecha en el formato indicado en la propiedad del objeto. Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . operationId ( string ): identificador de la operaci\u00f3n la cual se va a reportar. stationId ( string ): identificador de la estaci\u00f3n la cual va a ser reportada. palletId ( string ): identificador del pallet, esto es utilizado en almac\u00e9n, no en mecanizado. partData ( string ): informaci\u00f3n definida por producci\u00f3n dependiendo de la m\u00e1quina, pieza, modelo, etc. partTypeCode ( int ): indica que tipo de componente es. PartTypeCode values Puede ver los valores admitidos por el servicio aqu\u00ed . partTypeCodeSpecified ( bool ): valor de verdad que indica si ha sido especificado true o no false el tipo de componente. unitClassification ( ClassificationUnit ): enumerdor que indica que clase de pieza es. UnitClasiification values Puede ver los valores admitidos por el servicio aqu\u00ed (LabVIEW definition) o aqu\u00ed (C# .NET definition) . unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). unitResult ( int ): valor que indica cual ha sido el resultado de la operaci\u00f3n sobre esa pieza. UnitResult values Puede ver los valores admitidos por el servicio aqu\u00ed . atributos ( Atributo [] ): array de Atributos los cuales indican las caracteristicas de calidad de ese proceso. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaBirthHistory [] : array que contiene las respuestas recibidas, solo con un unico elemento dentro del array. 1 2 3 4 5 6 public RespuestaBirthHistory [] UploadBirthHistory ( int layoutId , int layoutVersion , string fecha , string operationId , string stationId , string palletId , string partData , int partTypeCode , bool partTypeCodeSpecified , ClassificationUnit unitClassification , string unitId , string wers , int unitResult , Atributo [] atributos , int dataSourceId , int nodeId , int transaction )","title":"UploadBirthHistory"},{"location":"Docs/GettingStarted/NET/funcs.html#operation-info-functions","text":"","title":"Operation Info Functions"},{"location":"Docs/GettingStarted/NET/funcs.html#getoperationstatus","text":"Metodo que obtiene la infmacion de estado de una pieza por el paso de una operacion y estacion dada. Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationsId ( string [] ): array de identificadores de operaciones a consultar. stationsId ( string [] ): array de identificadores de estaciones a ser consultadas. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaOperationInfo [] : Array de RespuestaOperationInfo con la informacion de la pieza al paso por las diversas maquinas. 1 2 3 public RespuestaOperationInfo [] GetOperationStatus ( string unitId , string wers , string [] operationsId , string [] stationsId , int dataSourceId , int nodeId , int transaction )","title":"GetOperationStatus"},{"location":"Docs/GettingStarted/NET/funcs.html#getoperationattributes","text":"Metodo que obtiene el estado y los atributos de una pieza al paso por una operacion y estacion dada. Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationsId ( string [] ): array de identificadores de operaciones a consultar. stationsId ( string [] ): array de identificadores de estaciones a ser consultadas. atributos ( int [] ): array de identificadores los atributos que queremos obtener. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaOperationInfo [] : Array de RespuestaOperationInfo con la informacion de la pieza al paso por las diversas maquinas. 1 2 3 public RespuestaOperationInfo [] GetOperationAttributes ( string unitId , string wers , string [] operationsId , string [] stationsId , int [] atributos , int dataSourceId , int nodeId , int transaction )","title":"GetOperationAttributes"},{"location":"Docs/GettingStarted/NET/funcs.html#getoperationoptionaldata","text":"Metodo que obtiene el estado de una pieza al paso por una operacion y estacion dada. En desarrollo Parameters unitId ( string ): identificador de la pieza. wers ( string ): tipo de la pieza (WERS). operationsId ( string [] ): array de identificadores de operaciones a consultar. stationsId ( string [] ): array de identificadores de estaciones a ser consultadas. dataSourceID ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaOperationInfo [] : Array de RespuestaOperationInfo con la informacion de la pieza al paso por las diversas maquinas. 1 2 3 public RespuestaOperationInfo [] GetOperationOptionalData ( string unitId , string wers , string [] operationsId , string [] stationsId , int dataSourceId , int nodeId , int transaction )","title":"GetOperationOptionalData"},{"location":"Docs/GettingStarted/NET/funcs.html#quarantine-functions","text":"","title":"Quarantine Functions"},{"location":"Docs/GettingStarted/NET/funcs.html#removequarantine","text":"Metodo que elimina cualquier estado de cuarentena (cuarentena/chatarra) de una pieza dada. Parameters unitIds ( string [] ): array de identificadores de piezas. wers ( string [] ): array de tipos de piezas (WERS). dataSource ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine . 1 2 public RespuestaQuarantine [] RemoveQuarantine ( string [] unitIds , string [] wers , int datasource , int nodeId , int transaction )","title":"RemoveQuarantine"},{"location":"Docs/GettingStarted/NET/funcs.html#movefromquarantinetoscrap","text":"Metodo que cambia el estado de Cuarentena a Chatarra de unas piezas. Parameters unitIds ( string [] ): array de identificadores de piezas. wers ( string [] ): array de tipos de piezas (WERS). dataSource ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine . 1 2 public RespuestaQuarantine [] MoveFromQuarantineToScrap ( string [] unitIds , string [] wers , int datasource , int nodeId , int transaction )","title":"MoveFromQuarantineToScrap"},{"location":"Docs/GettingStarted/NET/funcs.html#setquarantine","text":"Metodo que define el estado de cuarentena de varias piezas dadas. Parameters descripcion ( string ): breve explicaci\u00f3n de porque la pieza esta en ese estado negativo. operacion ( string ): identificador de la operacion que define dicho estado. fechas ( string ): fecha del momento en que se define dicho estado. Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . estado ( int ): valor que indica en que estado de cuarentena se encunetra/encuentran la/s pieza/s. QuarantineStatus values Puede ver los valores admitidos por el servicio aqu\u00ed . unitIds ( string [] ): array de identificadores de piezas. wers ( string [] ): array de tipos de piezas (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine . 1 2 3 public RespuestaQuarantine [] SetQuarantine ( string descripcion , string operacion , string fechas , int estado , string [] unitIds , string [] wers , int dataSourceId , int nodeId , int transaction )","title":"SetQuarantine"},{"location":"Docs/GettingStarted/NET/funcs.html#getscraplist","text":"Metodo que obtiene dado un tipo de pieza una lista de piezas en estado de chatarra. Parameters unitType ( string ): tipo de pieza (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine con la informacion de las piezas en chatarra. 1 2 public RespuestaQuarantine [] GetScrapList ( string unitType , int dataSourceId , int nodeId , int transaction )","title":"GetScrapList"},{"location":"Docs/GettingStarted/NET/funcs.html#getquarantinelist","text":"Metodo que obtiene dado un tipo de pieza una lista de las piezas en cuaretena. Parameters unitType ( string ): tipo de pieza (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine con la informacion de las piezas en cuarentena. 1 2 public RespuestaQuarantine [] GetQuarantineList ( string unitType , int dataSourceId , int nodeId , int transaction )","title":"GetQuarantineList"},{"location":"Docs/GettingStarted/NET/funcs.html#checkquarantine","text":"Metodo que dado una pieza nos dice el estado de dicha pieza, si esta o no en cuarentena o chatarra. Parameters unitIds ( string [] ): array de identificadores de las piezas a consultar. wers ( string [] ): array de los tipos de piezas (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaQuarantine [] : Array de RespuestaQuarantine con la informacion de las piezas. 1 2 public RespuestaQuarantine [] CheckQuarantine ( string [] unitIds , string [] wers , int dataSourceId , int nodeId , int transaction )","title":"CheckQuarantine"},{"location":"Docs/GettingStarted/NET/funcs.html#getallstations","text":"Metodo que envia la peticion al servidor QTS para obtener la informaci\u00f3n de todas las estaciones dadas de alta en el servidor. Return RespuestaGetAllStations [] : array de RespuestasGetAllStations donde cada elemento de la array es una estacion distinta. 1 public RespuestaGetAllStations [] GetAllStations ()","title":"GetAllStations"},{"location":"Docs/GettingStarted/NET/funcs.html#testsettingsdatabaseconnection","text":"Overloads TestSettingsDatabaseConnection() : metodo que comprueba si la configuracion actual para realizar la conexion con la base de datos es correcta o no. 1 public bool TestSettingsDatabaseConnection () TestSettingsDatabaseConnection(string connection, int provider) : metodo que comprueba si la configuracion pasada como arguemento para realizar la conexion con la base de datos es correcta o no. en desarrollo Parameters connection ( string ): DESCONOCIDO . provider ( int ): DESCONOCIDO . 1 2 public bool TestSettingsDatabaseConnection ( string connection , int provider ) Return bool : Valor de verdad que indica si funciona true o no false la configuracion con la base de datos.","title":"TestSettingsDatabaseConnection"},{"location":"Docs/GettingStarted/NET/funcs.html#getprocessdatahistory","text":"Overloads GetProcessDataHistory(string[] idStations, string fromDate, string toDate, int maxRows) : m\u00e9todo que obtiene el historico de un proceso indicando de que estaciones se quiere obtener y desde que fecha hasta que fecha, indicando un maximo de recepcion. Parameters idStations ( string [] ): identificadores de las estaciones a consultar. fromDate ( string ): desde que fecha se quiere los datos. toDate ( string ): hasta que fecha se desea consultar. Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . maxRows ( int ): n\u00famero m\u00e1ximo de respuestas. 1 2 public RespuestaGetProcessDataHistory [] GetProcessDataHistory ( string [] idStations , string fromDate , string toDate , int maxRows ) GetProcessDataHistory(string[] idStations, int maxRows) : m\u00e9todo que obtiene el historico de un proceso indicando de que estaciones se quiere obener y un m\u00e1ximo de informacion obtenida. Parameters idStations ( string [] ): identificadores de las estaciones a consultar. maxRows ( int ): n\u00famero m\u00e1ximo de respuestas. 1 2 public RespuestaGetProcessDataHistory [] GetProcessDataHistory ( string [] idStations , int maxRows ) Return RespuestaGetProcessDataHistory [] : Array de RespuestaGetProcessDataHistory que contiene cada uno la informacion relativa al proceso consultado.","title":"GetProcessDataHistory"},{"location":"Docs/GettingStarted/NET/funcs.html#lookupforparent","text":"M\u00e9todo que comprueba si la pieza consultada es componente de una mayor (Parent). Parameters componentId ( string ): identificador de la pieza a consultar (equivalente a unitID). nodeId ( int ): identificador del nodo/coprocessor. Return RespuestaLookUpForParent : objeto del tipo RespuestaLookUpForParent que contiene un booleano que indica si tiene Parent, y dos atributos con informacion de dicho Parent. 1 2 public RespuestaLookUpForParent LookUpForParent ( string componentId , int nodeId )","title":"LookUpForParent"},{"location":"Docs/GettingStarted/NET/funcs.html#partusage","text":"M\u00e9todo que comprueba cuantas veces ha sido reutilizada una mias pieza. Parameters unitId ( string ): identificador de la pieza a consultar (equivalente a unitID). wers ( string ): tipo de la pieza (WERS). dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaPartUsage [] : array de RespuestaPartUsage que contiene la informaci\u00f3n solicitada. 1 2 public RespuestaPartUsage [] PartUsage ( string unitId , string wers , int dataSourceId , int nodeId , int transaction )","title":"PartUsage"},{"location":"Docs/GettingStarted/NET/funcs.html#fmi","text":"","title":"FMI"},{"location":"Docs/GettingStarted/NET/funcs.html#flexiblemanualinspection","text":"M\u00e9todo que reporta una inspection manual flexible (FMI). Warning en desarrollo Parameters dataSourceId ( int ): identificador de la fuente de datos. nodeId ( int ): identificador del nodo/coprocessor. transaction ( int ): n\u00famero de transaccion, sirve para identificar el mensaje y comprobar la respuesta. Return RespuestaFlexibleManualInspection : array de RespuestaFlexibleManualInspection que contiene la informaci\u00f3n devuelta por el servicio. 1 2 public RespuestaFlexibleManualInspection FlexibleManualInspection ( int dataSourceId , int nodeId , int transaction )","title":"FlexibleManualInspection"},{"location":"Docs/GettingStarted/NET/funcs.html#getfmihhconfiguration","text":"M\u00e9todo que obtiene la configuracion del FMI HandHeld dada una IP. Warning en desarrollo Parameters dirIp ( string ): direcci\u00f3n IP del HanHeld a consultar. Return RespuestaGetFmiHhConfiguration : Objeto del tipo RespuestaGetFmiHhConfiguration con la informacion de la respuesta. 1 public RespuestaGetFmiHhConfiguration GetFmiHhConfiguration ( string dirIp )","title":"GetFmiHhConfiguration"},{"location":"Docs/GettingStarted/NET/funcs.html#getfmistatuscodesinformation","text":"M\u00e9todo que obtiene la informacion sobre que codigos de estado sobre FMI existen en ese momento. Return RespuestaGetFmistatusCodesInformation : objeto del tipo RespuestaGetFmistatusCodesInformation que contiene dichos codigos como atributos. 1 public RespuestaGetFmiStatusCodesInformation GetFmiStatusCodesInformation ()","title":"GetFmiStatusCodesInformation"},{"location":"Docs/GettingStarted/NET/object.html","text":"Other Objects Enum's EndpointConfig Enumerador utilizado a la hora de instanciar un nuevo objeto Wrapper para indicar que tipo de QTS_ServiceClient es. Este es un atributo propio del objeto Wrapper el cual sirve para establecer un tipo de conexi\u00f3n u otro. Warning Esta libreria esta pensada, desarrollada y testada como CoProcessor, en caso de usar HandHeld habr\u00e1 que tener cuidado a la hora de realizar reportes. 1 public enum EndpointConfig { CoProcessor , HandHeld } ClassificationUnit Enumerador utilizado a la hora de reportar una pieza para as\u00ed indicar que clase de pieza es. 1 2 3 4 5 6 7 8 9 10 11 12 13 public enum ClassificationUnit { Regular = 1 , Master = 2 , PV = 3 , GAGE = 4 , CustomerReturn = 5 , ServiceUnit = 6 , Float = 7 , Unknown = 8 , Left = 20 , Rigth = 21 } Arguments Atributo Este objeto permite hacer uso de forma m\u00e1s sencilla y eficaz de la fucionalidad de QTS, de forma entendible por los usuarios de la libreria. Posteriormente y de forma interna este objeto se tranforma al verdadero objeto esperado por el servicio. Parameters id ( int ): identificador del atributo a reportar. valor ( string ): valor de dicho atributo. 1 public Atributo ( int id , string valor ) Componente Este objeto permite hacer un uso m\u00e1s sencillo de la funcionalidad que hace uso de los componentes, as\u00ed como las funciones de BirthHistory de AddPart, RemovePart, etc. (esta funcionalidad todavia no est\u00e1 disponible, pero el objeto ya aparece definido, aun a falta de estar completamente definido). Warning en desarrollo Parameters desc ( int ): descripcion. 1 public Componente ( string desc ) Responses Estos objetos nos permiten tranformar las respuestas recibidas por el servicio, las cuales son bantante poco intuitivas e incluyen informaci\u00f3n innecesaria por unos objetos que incluyen aquellos datos necesarios e importantes para el usuario. Adem\u00e1s los objetos respuesta del servicio serian inentilegibles por el usuario pues su definicion no es accesible por estos. As\u00ed pues, gracias a esta transformacion los usuarios pueden acceder a la informacion devuelta. RespuestaBirthHistory Informaci\u00f3n recibida por las funciones BirthHistory . Properties dataDTS : indica la fecha de reporte de dicho BirthHistory. 1 public readonly string dataDTS ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . operationId : identificador de la operaci\u00f3n que hizo el reporte. 1 public readonly string operationId ; stationId : identificador de la estaci\u00f3n que hizo el reporte. 1 public readonly string stationId ; partData : dato definido por pruducci\u00f3n (es distinto segun como se defina en producci\u00f3n). 1 public readonly string partData ; quarStatus : estado de la cuarentena para dicha pieza. 1 public readonly int quarStatus ; quarStatus values Puede ver los valores admitidos por el servicio aqu\u00ed unitId : identificador de la pieza. 1 public readonly string unitId ; unitType : tipo de la pieza (WERS). 1 public readonly string unitType ; mensaje : mensaje enviado por el servidor indicando el resultado de la operaci\u00f3n solicitada (en caso de que haya funcionado correctamente se recibe un ' OK '). 1 public readonly string mensaje ; RespuestaFlexibleManualInspection Informaci\u00f3n recibida por la funci\u00f3n FlexibleManualInspection . Warning en desarrollo Properties cuerpo : auxiliar. 1 public readonly string cuerpo ; RespuestaGetAllStations Informaci\u00f3n recibida por la funci\u00f3n GetAllStations . Properties id : identificador de la estaci\u00f3n. 1 public readonly string id ; descripcion : descripci\u00f3n de la estaci\u00f3n. 1 public readonly string descripcion ; RespuestaGetFmiHhConfiguration Informaci\u00f3n recibida por la funci\u00f3n GetFmiHhConfiguration . Warning en desarrollo Properties miRespuesta : auxiliar. 1 public readonly string miRespuesta ; RespuestaGetFmiStatusCodesInformation Informaci\u00f3n recibida por la funci\u00f3n GetFmiStatusCodesInformation . Properties codigoAprobado : codigo utilizado para identificar como Aprobado. 1 public readonly int codigoAprobado ; codigoIncompleto : codigo utilizado para identificar como Incompleto. 1 public readonly int codigoIncompleto ; codigoRechazado : codigo utilizado para identificar como Rechazado. 1 public readonly int codigoRechazado ; RespuestaGetProcessDataHistory Informaci\u00f3n recibida por la funci\u00f3n GetProcessDataHistory . Properties operationId : operaci\u00f3n consultada. 1 public readonly string operationId ; stationId : estaci\u00f3n consultada. 1 public readonly string stationId ; palletId : identificador del pallet de la pieza. 1 public readonly string palletId ; partTypeCode : codigo que indica que tipo de partici\u00f3n es. (si aparce vacio es equivalente a NoAplicable) 1 public readonly long partTypeCode ; partTypeCode values Puede ver los valores admitidos por el servicio aqu\u00ed processDateTime : fecha del procesado de esa pieza. 1 public readonly string processDateTime ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . statusCode : codigo utilizado para identificar como Rechazado. 1 public readonly string statusCode ; statusCode values Puede ver los valores admitidos por el servicio aqu\u00ed unitId : identificador de la pieza procesada. 1 public readonly string unitId ; unitTypeCode : tipo de la pieza procesada (WERS). 1 public readonly string unitTypeCode ; uploadDateTime : fecha de subida del reporte (no tiene porque ser la misma a processDateTime debido a que puede haber habido un fallo de comunicaci\u00f3n y el reporte realizarse m\u00e1s tarde). 1 public readonly string uploadDateTime ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . RespuestaLookUpForParent Informaci\u00f3n recibida por la funci\u00f3n LookUpForParent . Properties hasParent : valor de verdad que indica si la pieza consultada est\u00e1 ensamblada en otra mayor true o no false . 1 public readonly bool hasParent ; parentUnitId : identificador de la pieza padre. 1 public readonly string parentUnitId ; parentUnitType : tipo de la pieza padre (WERS). 1 public readonly string parentUnitType ; RespuestaOperationInfo Informaci\u00f3n recibida por las funciones OperationInfo . Properties FixtureNumber : DESCONOCIDO. 1 public readonly string FixtureNumber ; LastMachiningOperation : identificador de la operaci\u00f3n que hizo el reporte consultadao o el ultimo reporte de dicha pieza. 1 public readonly string LastMachiningOperation ; MachineSeriallNumber : identificador de la estaci\u00f3n que hizo el reporte consultadao o el ultimo reporte de dicha pieza. 1 public readonly string MachineSeriallNumber ; MachiningDateTime : fecha del procesado de dicha pieza por esa m\u00e1quina. 1 public readonly string MachiningDateTime ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . OperationData : posible partData, atributo definido por producci\u00f3n, variable por m\u00e1quina, pieza, etc. 1 public readonly string OperationData ; OperationStatus : resultado de la operaci\u00f3n sobre dicha pieza. 1 public readonly int OperationStatus ; OperationStatus values Puede ver los valores admitidos por el servicio aqu\u00ed NombreAtributo : array con los identificadores de los atributos de dicha pieza por el paso de dicha operaci\u00f3n. 1 public string [] NombreAtributo ; ValorAtributo : array con los valores de los atributos de dicha pieza por el paso de dicha operaci\u00f3n. 1 public string [] ValorAtributo ; mensaje : mensaje enviado por el servidor indicando el resultado de la operaci\u00f3n solicitada (en caso de que haya funcionado correctamente se recibe un ' OK '). 1 public readonly string mensaje ; RespuestaPartUsage Informaci\u00f3n recibida por la funci\u00f3n PartUsage . Properties quarantineName : nombre de la cuarentena, s\u00ed la hay. 1 public readonly string quarantineName ; quarantineStatus : estado de la cuarentena (el valor vac\u00edo indica que lo mismo que OK). 1 public readonly int quarantineStatus ; quarantineStatus values Puede ver los valores admitidos por el servicio aqu\u00ed reuseCount : numero que indica la cantidad de veces que se ha utilizado para misma pieza. 1 public readonly int reuseCount ; unitId : identificador de la pieza. 1 public readonly string unitId ; unitType : tipo de la pieza (WERS). 1 public readonly string unitType ; RespuestaQuarantine Informaci\u00f3n recibida por las funciones Quarantine . Properties Descripcion : breve explicaci\u00f3n del motivo por el cual la pieza esta en ese estado (solo cuando el Estado es distinto de OK). 1 public readonly string Descripcion ; CuarentenaID : identificador de la cuarentena (solo cuando el Estado es distinto de OK). 1 public readonly string CuarentenaID ; NombreDeLaCuarentena : nombre de la cuarentena, utilizado habitualmente para identificarla de forma sencilla (solo cuando el Estado es distinto de OK). 1 public readonly string NombreDeLaCuarentena ; Estado : estado de la cuarentena sobre dicha pieza. 1 public readonly int Estado ; Estado values Puede ver los valores admitidos por el servicio aqu\u00ed CuentaDeReutilizacion : indicador de veces que se ha reutilizado dicha pieza (equivalente a PartUSage ). 1 public readonly int CuentaDeReutilizacion ; UnitId : identificador de la pieza consultada. 1 public readonly string UnitId ; UnitType : tipo de la pieza consultada (WERS). 1 public readonly string UnitType ; mensaje : mensaje enviado por el servidor indicando el resultado de la operaci\u00f3n solicitada (en caso de que haya funcionado correctamente se recibe un ' OK '). 1 public readonly string mensaje ;","title":"Other Objects"},{"location":"Docs/GettingStarted/NET/object.html#other-objects","text":"","title":"Other Objects"},{"location":"Docs/GettingStarted/NET/object.html#enums","text":"","title":"Enum's"},{"location":"Docs/GettingStarted/NET/object.html#endpointconfig","text":"Enumerador utilizado a la hora de instanciar un nuevo objeto Wrapper para indicar que tipo de QTS_ServiceClient es. Este es un atributo propio del objeto Wrapper el cual sirve para establecer un tipo de conexi\u00f3n u otro. Warning Esta libreria esta pensada, desarrollada y testada como CoProcessor, en caso de usar HandHeld habr\u00e1 que tener cuidado a la hora de realizar reportes. 1 public enum EndpointConfig { CoProcessor , HandHeld }","title":"EndpointConfig"},{"location":"Docs/GettingStarted/NET/object.html#classificationunit","text":"Enumerador utilizado a la hora de reportar una pieza para as\u00ed indicar que clase de pieza es. 1 2 3 4 5 6 7 8 9 10 11 12 13 public enum ClassificationUnit { Regular = 1 , Master = 2 , PV = 3 , GAGE = 4 , CustomerReturn = 5 , ServiceUnit = 6 , Float = 7 , Unknown = 8 , Left = 20 , Rigth = 21 }","title":"ClassificationUnit"},{"location":"Docs/GettingStarted/NET/object.html#arguments","text":"","title":"Arguments"},{"location":"Docs/GettingStarted/NET/object.html#atributo","text":"Este objeto permite hacer uso de forma m\u00e1s sencilla y eficaz de la fucionalidad de QTS, de forma entendible por los usuarios de la libreria. Posteriormente y de forma interna este objeto se tranforma al verdadero objeto esperado por el servicio. Parameters id ( int ): identificador del atributo a reportar. valor ( string ): valor de dicho atributo. 1 public Atributo ( int id , string valor )","title":"Atributo"},{"location":"Docs/GettingStarted/NET/object.html#componente","text":"Este objeto permite hacer un uso m\u00e1s sencillo de la funcionalidad que hace uso de los componentes, as\u00ed como las funciones de BirthHistory de AddPart, RemovePart, etc. (esta funcionalidad todavia no est\u00e1 disponible, pero el objeto ya aparece definido, aun a falta de estar completamente definido). Warning en desarrollo Parameters desc ( int ): descripcion. 1 public Componente ( string desc )","title":"Componente"},{"location":"Docs/GettingStarted/NET/object.html#responses","text":"Estos objetos nos permiten tranformar las respuestas recibidas por el servicio, las cuales son bantante poco intuitivas e incluyen informaci\u00f3n innecesaria por unos objetos que incluyen aquellos datos necesarios e importantes para el usuario. Adem\u00e1s los objetos respuesta del servicio serian inentilegibles por el usuario pues su definicion no es accesible por estos. As\u00ed pues, gracias a esta transformacion los usuarios pueden acceder a la informacion devuelta.","title":"Responses"},{"location":"Docs/GettingStarted/NET/object.html#respuestabirthhistory","text":"Informaci\u00f3n recibida por las funciones BirthHistory . Properties dataDTS : indica la fecha de reporte de dicho BirthHistory. 1 public readonly string dataDTS ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . operationId : identificador de la operaci\u00f3n que hizo el reporte. 1 public readonly string operationId ; stationId : identificador de la estaci\u00f3n que hizo el reporte. 1 public readonly string stationId ; partData : dato definido por pruducci\u00f3n (es distinto segun como se defina en producci\u00f3n). 1 public readonly string partData ; quarStatus : estado de la cuarentena para dicha pieza. 1 public readonly int quarStatus ; quarStatus values Puede ver los valores admitidos por el servicio aqu\u00ed unitId : identificador de la pieza. 1 public readonly string unitId ; unitType : tipo de la pieza (WERS). 1 public readonly string unitType ; mensaje : mensaje enviado por el servidor indicando el resultado de la operaci\u00f3n solicitada (en caso de que haya funcionado correctamente se recibe un ' OK '). 1 public readonly string mensaje ;","title":"RespuestaBirthHistory"},{"location":"Docs/GettingStarted/NET/object.html#respuestaflexiblemanualinspection","text":"Informaci\u00f3n recibida por la funci\u00f3n FlexibleManualInspection . Warning en desarrollo Properties cuerpo : auxiliar. 1 public readonly string cuerpo ;","title":"RespuestaFlexibleManualInspection"},{"location":"Docs/GettingStarted/NET/object.html#respuestagetallstations","text":"Informaci\u00f3n recibida por la funci\u00f3n GetAllStations . Properties id : identificador de la estaci\u00f3n. 1 public readonly string id ; descripcion : descripci\u00f3n de la estaci\u00f3n. 1 public readonly string descripcion ;","title":"RespuestaGetAllStations"},{"location":"Docs/GettingStarted/NET/object.html#respuestagetfmihhconfiguration","text":"Informaci\u00f3n recibida por la funci\u00f3n GetFmiHhConfiguration . Warning en desarrollo Properties miRespuesta : auxiliar. 1 public readonly string miRespuesta ;","title":"RespuestaGetFmiHhConfiguration"},{"location":"Docs/GettingStarted/NET/object.html#respuestagetfmistatuscodesinformation","text":"Informaci\u00f3n recibida por la funci\u00f3n GetFmiStatusCodesInformation . Properties codigoAprobado : codigo utilizado para identificar como Aprobado. 1 public readonly int codigoAprobado ; codigoIncompleto : codigo utilizado para identificar como Incompleto. 1 public readonly int codigoIncompleto ; codigoRechazado : codigo utilizado para identificar como Rechazado. 1 public readonly int codigoRechazado ;","title":"RespuestaGetFmiStatusCodesInformation"},{"location":"Docs/GettingStarted/NET/object.html#respuestagetprocessdatahistory","text":"Informaci\u00f3n recibida por la funci\u00f3n GetProcessDataHistory . Properties operationId : operaci\u00f3n consultada. 1 public readonly string operationId ; stationId : estaci\u00f3n consultada. 1 public readonly string stationId ; palletId : identificador del pallet de la pieza. 1 public readonly string palletId ; partTypeCode : codigo que indica que tipo de partici\u00f3n es. (si aparce vacio es equivalente a NoAplicable) 1 public readonly long partTypeCode ; partTypeCode values Puede ver los valores admitidos por el servicio aqu\u00ed processDateTime : fecha del procesado de esa pieza. 1 public readonly string processDateTime ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . statusCode : codigo utilizado para identificar como Rechazado. 1 public readonly string statusCode ; statusCode values Puede ver los valores admitidos por el servicio aqu\u00ed unitId : identificador de la pieza procesada. 1 public readonly string unitId ; unitTypeCode : tipo de la pieza procesada (WERS). 1 public readonly string unitTypeCode ; uploadDateTime : fecha de subida del reporte (no tiene porque ser la misma a processDateTime debido a que puede haber habido un fallo de comunicaci\u00f3n y el reporte realizarse m\u00e1s tarde). 1 public readonly string uploadDateTime ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido .","title":"RespuestaGetProcessDataHistory"},{"location":"Docs/GettingStarted/NET/object.html#respuestalookupforparent","text":"Informaci\u00f3n recibida por la funci\u00f3n LookUpForParent . Properties hasParent : valor de verdad que indica si la pieza consultada est\u00e1 ensamblada en otra mayor true o no false . 1 public readonly bool hasParent ; parentUnitId : identificador de la pieza padre. 1 public readonly string parentUnitId ; parentUnitType : tipo de la pieza padre (WERS). 1 public readonly string parentUnitType ;","title":"RespuestaLookUpForParent"},{"location":"Docs/GettingStarted/NET/object.html#respuestaoperationinfo","text":"Informaci\u00f3n recibida por las funciones OperationInfo . Properties FixtureNumber : DESCONOCIDO. 1 public readonly string FixtureNumber ; LastMachiningOperation : identificador de la operaci\u00f3n que hizo el reporte consultadao o el ultimo reporte de dicha pieza. 1 public readonly string LastMachiningOperation ; MachineSeriallNumber : identificador de la estaci\u00f3n que hizo el reporte consultadao o el ultimo reporte de dicha pieza. 1 public readonly string MachineSeriallNumber ; MachiningDateTime : fecha del procesado de dicha pieza por esa m\u00e1quina. 1 public readonly string MachiningDateTime ; Why date in string format? Esto es debido al problema de conversion de tipos internos de LabVIEW cliente principal de esta libreria. Se detecto un fallo al utilizar el tipo definido System . DateTime . Se decidi\u00f3 pasar a usar string usando un formato estandar definido . OperationData : posible partData, atributo definido por producci\u00f3n, variable por m\u00e1quina, pieza, etc. 1 public readonly string OperationData ; OperationStatus : resultado de la operaci\u00f3n sobre dicha pieza. 1 public readonly int OperationStatus ; OperationStatus values Puede ver los valores admitidos por el servicio aqu\u00ed NombreAtributo : array con los identificadores de los atributos de dicha pieza por el paso de dicha operaci\u00f3n. 1 public string [] NombreAtributo ; ValorAtributo : array con los valores de los atributos de dicha pieza por el paso de dicha operaci\u00f3n. 1 public string [] ValorAtributo ; mensaje : mensaje enviado por el servidor indicando el resultado de la operaci\u00f3n solicitada (en caso de que haya funcionado correctamente se recibe un ' OK '). 1 public readonly string mensaje ;","title":"RespuestaOperationInfo"},{"location":"Docs/GettingStarted/NET/object.html#respuestapartusage","text":"Informaci\u00f3n recibida por la funci\u00f3n PartUsage . Properties quarantineName : nombre de la cuarentena, s\u00ed la hay. 1 public readonly string quarantineName ; quarantineStatus : estado de la cuarentena (el valor vac\u00edo indica que lo mismo que OK). 1 public readonly int quarantineStatus ; quarantineStatus values Puede ver los valores admitidos por el servicio aqu\u00ed reuseCount : numero que indica la cantidad de veces que se ha utilizado para misma pieza. 1 public readonly int reuseCount ; unitId : identificador de la pieza. 1 public readonly string unitId ; unitType : tipo de la pieza (WERS). 1 public readonly string unitType ;","title":"RespuestaPartUsage"},{"location":"Docs/GettingStarted/NET/object.html#respuestaquarantine","text":"Informaci\u00f3n recibida por las funciones Quarantine . Properties Descripcion : breve explicaci\u00f3n del motivo por el cual la pieza esta en ese estado (solo cuando el Estado es distinto de OK). 1 public readonly string Descripcion ; CuarentenaID : identificador de la cuarentena (solo cuando el Estado es distinto de OK). 1 public readonly string CuarentenaID ; NombreDeLaCuarentena : nombre de la cuarentena, utilizado habitualmente para identificarla de forma sencilla (solo cuando el Estado es distinto de OK). 1 public readonly string NombreDeLaCuarentena ; Estado : estado de la cuarentena sobre dicha pieza. 1 public readonly int Estado ; Estado values Puede ver los valores admitidos por el servicio aqu\u00ed CuentaDeReutilizacion : indicador de veces que se ha reutilizado dicha pieza (equivalente a PartUSage ). 1 public readonly int CuentaDeReutilizacion ; UnitId : identificador de la pieza consultada. 1 public readonly string UnitId ; UnitType : tipo de la pieza consultada (WERS). 1 public readonly string UnitType ; mensaje : mensaje enviado por el servidor indicando el resultado de la operaci\u00f3n solicitada (en caso de que haya funcionado correctamente se recibe un ' OK '). 1 public readonly string mensaje ;","title":"RespuestaQuarantine"},{"location":"Docs/GettingStarted/NET/overview.html","text":"Overview Info Esta librer\u00eda nos ofrece una especie de envoltorio (Wrapper) tipo interfaz que es capaz de simplificar el uso de toda la funcionalidad disponible mediante el servicio de QTS adem\u00e1s de reducir el tiempo de aprendizaje necesario par hacer uso de este tipo de funcionalidad. Table of Contents Wrapper En este apartado podemos encontrar la definici\u00f3n del objeto Wrapper as\u00ed como toda la funcionalidad que contiene. Other Objects Aqu\u00ed se definen el resto de objetos o tipos definidos utilizados en la librer\u00eda.","title":"Overview"},{"location":"Docs/GettingStarted/NET/overview.html#overview","text":"Info Esta librer\u00eda nos ofrece una especie de envoltorio (Wrapper) tipo interfaz que es capaz de simplificar el uso de toda la funcionalidad disponible mediante el servicio de QTS adem\u00e1s de reducir el tiempo de aprendizaje necesario par hacer uso de este tipo de funcionalidad.","title":"Overview"},{"location":"Docs/GettingStarted/NET/overview.html#table-of-contents","text":"Wrapper En este apartado podemos encontrar la definici\u00f3n del objeto Wrapper as\u00ed como toda la funcionalidad que contiene. Other Objects Aqu\u00ed se definen el resto de objetos o tipos definidos utilizados en la librer\u00eda.","title":"Table of Contents"},{"location":"Docs/GettingStarted/NET/wrapper.html","text":"Wrapper Namespace: WrapperLibrary Assemblies: System.Reflection.DispatchProxy.dll System.ServiceModel.Http.dll System.ServiceModel.Primitives.dll System.Private.ServiceModel.dll Definition Clase que sirve como interfaz que incluye toda la funcionalidad para hacer uso del WebService QTS. Properties FORMATO_DATETIME Cadena de caracteres ( string ) utilizada para indica que formato se desea a la hora de transformar las fechas recibidas como System . DateTime al string esperado por el servicio. 1 public static readonly string FORMATO_DATETIME = yyyy/MM/dd HH:mm:ss Info El resto de propiedades son privadas y por consiguiente inaccesibles para los usuarios. Constructor 1 public Wrapper ( EndpointConfig conf , string dirIP ) Parameters conf ( EndpointConfig ): enumerdor que indica que tipo de endpoint es el que estamos configurando. dirIP ( string ):cadena con la direcci\u00f3n IP del servicio de QTS. Default Value La direcci\u00f3n IP del servidor de QTS es \"19.174.65.26\".","title":"Definition"},{"location":"Docs/GettingStarted/NET/wrapper.html#wrapper","text":"Namespace: WrapperLibrary Assemblies: System.Reflection.DispatchProxy.dll System.ServiceModel.Http.dll System.ServiceModel.Primitives.dll System.Private.ServiceModel.dll","title":"Wrapper"},{"location":"Docs/GettingStarted/NET/wrapper.html#definition","text":"Clase que sirve como interfaz que incluye toda la funcionalidad para hacer uso del WebService QTS.","title":"Definition"},{"location":"Docs/GettingStarted/NET/wrapper.html#properties","text":"","title":"Properties"},{"location":"Docs/GettingStarted/NET/wrapper.html#formato_datetime","text":"Cadena de caracteres ( string ) utilizada para indica que formato se desea a la hora de transformar las fechas recibidas como System . DateTime al string esperado por el servicio. 1 public static readonly string FORMATO_DATETIME = yyyy/MM/dd HH:mm:ss Info El resto de propiedades son privadas y por consiguiente inaccesibles para los usuarios.","title":"FORMATO_DATETIME"},{"location":"Docs/GettingStarted/NET/wrapper.html#constructor","text":"1 public Wrapper ( EndpointConfig conf , string dirIP ) Parameters conf ( EndpointConfig ): enumerdor que indica que tipo de endpoint es el que estamos configurando. dirIP ( string ):cadena con la direcci\u00f3n IP del servicio de QTS. Default Value La direcci\u00f3n IP del servidor de QTS es \"19.174.65.26\".","title":"Constructor"}]}